<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boctorio&#39;s Blog</title>
  
  <subtitle>欢迎访问我校oj   www.hpuoj.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://boctorio.github.io/"/>
  <updated>2019-01-09T13:38:10.356Z</updated>
  <id>https://boctorio.github.io/</id>
  
  <author>
    <name>Boctorio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>素数筛选法</title>
    <link href="https://boctorio.github.io/2019/01/09/%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/"/>
    <id>https://boctorio.github.io/2019/01/09/素数筛选法/</id>
    <published>2019-01-09T13:03:37.000Z</published>
    <updated>2019-01-09T13:38:10.356Z</updated>
    
    <content type="html"><![CDATA[<p>素数，是指因子只包含1和其本身的数，那么，我们怎么判断素数呢？</p><p><strong>（以下代码均基于打表（1~1e6）的基础上完成）</strong></p><a id="more"></a><h4 id="1-按照定义计算"><a href="#1-按照定义计算" class="headerlink" title="1.按照定义计算"></a>1.按照定义计算</h4><p>素数的定义就是一个数的因子只包含1和其本身，那么我们直接就按照定义写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">pri[i]=isprime(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最基础的写法，也是最小白的写法。毕竟，当时我刚高一加入大学的某个协会时，考的就有判断素数…</p><p>这种算法的复杂度为O(n^2),复杂度非常的大，对于1e6的数据范围来说肯定要超时，那么还有没有更优化的算法？答案是肯定的</p><h4 id="2-基于定义计算的优化算法"><a href="#2-基于定义计算的优化算法" class="headerlink" title="2.基于定义计算的优化算法"></a>2.基于定义计算的优化算法</h4><p>我们对一个合数进行考虑，例如12：</p><p>它的因子有1 2 3 4 6 12 ，而且1<em>12=12 ，  2</em>6=12 ， 3*4=12</p><p>可见，每一个因子都会有另一个对应的因子，观察可得，它们的分布是平均的，左边的一半对应右边的一半，那么最中间的分界线应该是什么？ √n 。</p><p>因此，我们只需要对√n 前面的数字进行判断即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)<span class="comment">//只需要将i变成i*i即可 </span></span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">pri[i]=isprime(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法的复杂度要比上一种好的多，复杂度为O(n√n),但是对于1e6的数据范围来说还是太大了。有没有再快一点的算法？</p><h4 id="3-素数筛选法"><a href="#3-素数筛选法" class="headerlink" title="3.素数筛选法"></a>3.素数筛选法</h4><p>素数筛选法的思想为：</p><p>从2开始，因为2的倍数一定不是素数，所以先把2的倍数全部删去；</p><p>接着找下一个素数3，把3的倍数全部删去；</p><p>因为4是2的倍数，已经被删去，所以直接找下一个素数5，把5的倍数全部删去；</p><p>接着7的倍数，11的倍数，……直到把1e6范围内的合数全部筛选出去，剩下的即为素数：</p><p>//以下优化均基于打表的基础上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isprime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//此处vis[i]=1表示不是素数，vis[i]=0表示是素数 </span></span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//由于i*i的数据范围可能会超过int，所以需要用long long表示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i*i&lt;=maxn;i++)&#123;<span class="comment">//此处有优化，因为如果一个合数&gt;sqrt(maxn),那么他必定在前面已经被标记过。 </span></span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i;j&lt;=maxn;j+=i)&#123;<span class="comment">//此处也有优化，我们只需要判断从i*i开始判断即可。 </span></span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">isprime();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法的复杂度应该为O(n);，是一种非常快速的判断素数的算法。</p><p>上述代码有两处优化，第一处优化的证明如下：</p><p><strong>假设 maxn &gt; i &gt; sqrt(maxn)并且为合数，那么，他肯定会有一个因子小于等于sqrt(maxn)，因此，i一定在之前已经被标记过了。</strong></p><p>第二处优化证明为：</p><p><strong>假设i&gt;2，那么对于 i * ( i - 1 )：</strong></p><p><strong>如果 i - 1是素数，那么 i * ( i - 1 ) 一定在之前已经被标记过；</strong></p><p><strong>否则，如果 i - 1 是合数，那么  i - 1能被分成更小的素数。设其中一个为a，那么 i <em> ( i - 1 )= i </em> ( i - 1 ) / a * a 也一定被标记过。</strong></p><p>优化后的算法时间会节省非常多，在平常的算法竞赛中，用上述代码就已经可以解决大部分的涉及素数打表的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;素数，是指因子只包含1和其本身的数，那么，我们怎么判断素数呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（以下代码均基于打表（1~1e6）的基础上完成）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="素数" scheme="https://boctorio.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>费马小定理--轻松判断大质数</title>
    <link href="https://boctorio.github.io/2019/01/09/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86-%E8%BD%BB%E6%9D%BE%E5%88%A4%E6%96%AD%E5%A4%A7%E8%B4%A8%E6%95%B0/"/>
    <id>https://boctorio.github.io/2019/01/09/费马小定理-轻松判断大质数/</id>
    <published>2019-01-09T01:51:56.000Z</published>
    <updated>2019-01-09T13:39:26.246Z</updated>
    
    <content type="html"><![CDATA[<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>在算法竞赛中你会遇到各种各样的有关素数的问题，今天你来解决一个最基础的问题：如何判定一个素数。<br>对于给定的正整数p，若p非素数，输出-1<br>若p是素数 输出 ：{sigma(a^(p-1) % p) ，其中a的下界为1，上界为p-1}</p><a id="more"></a><p>即：</p><p> <img src="/2019/01/09/费马小定理-轻松判断大质数/判断素数.png" alt=""></p><p>输入</p><p>多实例测试，每组数据包含一个正整数p（p &lt; 10^16）。</p><p>输出</p><p>根据情况输出一个正整数，保证答案在int64之内，输出占一行。</p><p>样例输入</p><p>2</p><p>样例输出</p><p>1</p><p>这个题一般方法是就是暴力求解了，首先判断是不是素数，如果不是素数，那么输出-1，如果是素数，那么就实处上面那个式子的值。</p><p>但是题目要求的数据范围为1e16，如果我们用一般判断素数的方法（sqrt(n)）去求解的话，必定会超时，那么我们如何解决这个问题呢，费马小定理出现了。</p><blockquote><p>费马小定理<br> 假如p是质数，且gcd(a,p)=1，那么 a(p-1)≡1（mod p），例如：假如a是整数，p是质数，则a,p显然互质(即两者只有一个公约数1)，那么我们可以得到费马小定理的一个特例，即当p为质数时候， a^(p-1)≡1(mod p)。</p></blockquote><p>从费马小定理的定义我们可以知道，一般情况下，只要一个数字a，gcd(a,p)=1，那么p就是一个质数。</p><p>因此，我们可以随机几个数字（与p互质），如果a(p-1)≡1（mod p）对这些数字恒成立，那么p就是一个指数。</p><p>一般情况下，我们只需要列举十个左右的数字即可确定一个数字是否为质数。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,res,x;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">​    <span class="keyword">return</span> b?gcd(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">feima</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">​    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">​        <span class="keyword">return</span> (a*res)%n;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">​        a=(a*a)%n;</span><br><span class="line">​        x/=<span class="number">2</span>;</span><br><span class="line">​        <span class="keyword">return</span> feima(a);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">else</span>&#123;</span><br><span class="line">​        res=(res*a)%n;</span><br><span class="line">​        a=(a*a)%n;</span><br><span class="line">​        x/=<span class="number">2</span>;</span><br><span class="line">​        <span class="keyword">return</span> feima(a);</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> t,i;</span><br><span class="line">​    <span class="comment">//以下是我自己列举的一些随机数，我们也可以用一些随机数函数来找一些随机数 </span></span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">20</span>]=&#123;<span class="number">7</span>,<span class="number">43</span>,<span class="number">64</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">31</span>,<span class="number">45</span>,<span class="number">72</span>,<span class="number">81</span>,<span class="number">79</span>,<span class="number">47</span>,<span class="number">33</span>,<span class="number">43</span>,<span class="number">97</span>,<span class="number">121</span>,<span class="number">199</span>,<span class="number">173</span>,<span class="number">153</span>,<span class="number">157</span>,<span class="number">53</span>&#125;; </span><br><span class="line">​    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))&#123;</span><br><span class="line">​        <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">​            <span class="keyword">continue</span>;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">​            res=<span class="number">1</span>;</span><br><span class="line">​            x=n<span class="number">-1</span>;</span><br><span class="line">​            <span class="keyword">if</span>(gcd(a[i],n)!=<span class="number">1</span> || feima(a[i])!=<span class="number">1</span>)&#123;<span class="comment">//两个判断条件，两个数字互质且符合费马小定理 </span></span><br><span class="line">​                <span class="keyword">break</span>;</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span>(i==<span class="number">20</span>)&#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n<span class="number">-1</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">else</span></span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上方法即可迅速判断一个数是否是质数，对特别大的数字尤其适用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h5&gt;&lt;p&gt;在算法竞赛中你会遇到各种各样的有关素数的问题，今天你来解决一个最基础的问题：如何判定一个素数。&lt;br&gt;对于给定的正整数p，若p非素数，输出-1&lt;br&gt;若p是素数 输出 ：{sigma(a^(p-1) % p) ，其中a的下界为1，上界为p-1}&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="费马小定理" scheme="https://boctorio.github.io/tags/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    
      <category term="质数" scheme="https://boctorio.github.io/tags/%E8%B4%A8%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>算数基本定理 + 容斥定理</title>
    <link href="https://boctorio.github.io/2019/01/09/%E7%AE%97%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86-%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86/"/>
    <id>https://boctorio.github.io/2019/01/09/算数基本定理-容斥定理/</id>
    <published>2019-01-09T01:22:54.000Z</published>
    <updated>2019-01-09T13:39:38.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算数基本定理"><a href="#算数基本定理" class="headerlink" title="算数基本定理"></a>算数基本定理</h2><p>定义：任何一个大于1的自然数，如果N不为质数，那么N可以分解成有限个质数的乘积，并且在不计次序的情况下，这种分解方式是唯一的。</p><p>例如：60可以分解为 2^2 * 3 * 5</p><a id="more"></a><p>数学公式描述</p><p>N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn  （P1&lt;P2&lt;P3&lt;…<pn &="" pi="" 是质数="" ri="">=0）</pn></p><h4 id="质因子分解计算方法-算法复杂度-O-√n"><a href="#质因子分解计算方法-算法复杂度-O-√n" class="headerlink" title="质因子分解计算方法 算法复杂度  ( O(√n)  )"></a>质因子分解计算方法 算法复杂度  ( O(√n)  )</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; prime_factor(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ++ans[i];</span><br><span class="line">            n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)</span><br><span class="line">        ans[n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算数基本定理的应用"><a href="#算数基本定理的应用" class="headerlink" title="算数基本定理的应用"></a>算数基本定理的应用</h4><p>如何求N有几个因子？</p><p>根据算数基本定理：N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn</p><p>根据排列组合得到结果：</p><p>ans=(1+r1) * (1+r2) * (1+r3) * … * (1+rn)</p><p> <img src="/2019/01/09/算数基本定理-容斥定理/因子之和.png" alt=""></p><p>如何求N的所有因子之和？</p><p>根据算数基本定理：N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn</p><p>求GCD(X,Y)和LCM(X,Y)</p><p>根据算数基本定理：</p><p>X=P1^x1 * P2^x2 * P3^x3 * … * Pn^xn</p><p>Y=P1^y1 * P2^y2 * P3^y3 *… * Pn^yn</p><p>根据GCD和LCM的定义</p><p><img src="/2019/01/09/算数基本定理-容斥定理/GCD.png" alt=""></p><p><img src="/2019/01/09/算数基本定理-容斥定理/LCM.png" alt=""></p><h2 id="容斥定理"><a href="#容斥定理" class="headerlink" title="容斥定理"></a>容斥定理</h2><p>要计算几个集合并集的大小，我们要先将所有单个集合的大 小计算出来，然后减去所有两个集合相交的部分，再加回所 有三个集合相交的部分，再减去所有四个集合相交的部分， 依此类推，一直计算到所有集合相交的部分。</p><p>用Venn图来表示</p><p><img src="/2019/01/09/算数基本定理-容斥定理/veen.png" alt=""></p><p>数学公式描述</p><p><img src="/2019/01/09/算数基本定理-容斥定理/数学公式.png" alt=""></p><p>如果要对n个物体进行选择，那么有多少种情况？</p><p>代码    复杂度为O(2^n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span> &lt;&lt; m);i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i&gt;&gt;j &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容斥定理的应用"><a href="#容斥定理的应用" class="headerlink" title="容斥定理的应用"></a>容斥定理的应用</h4><p>问题：魔镜给小明m个数字（a1、a2 …… am）和一个整数n，魔镜定义：如果有一个数，是这m个数字里面任意一 个数的倍数，那么这个数称为LuckyNumber。而小明会的题 数为[1,n]闭区间内LuckyNumber的数量。 (0 &lt; m &lt; 15) 那么请你帮小明计算一下他会的题目数。</p><p>代码  复杂度为O(2^n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;(i&lt;&lt;m);i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    LL LCM=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>&amp;(i&gt;&gt;j))&#123;<span class="comment">//按位运算判断第m个数是否使用 </span></span><br><span class="line">            cnt++;</span><br><span class="line">            LCM=lcm(LCM,a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) ans+=n/LCM;<span class="comment">//判断n中元素使用的个数，奇加偶减</span></span><br><span class="line">    <span class="keyword">else</span> ans-=n/LCM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算数基本定理&quot;&gt;&lt;a href=&quot;#算数基本定理&quot; class=&quot;headerlink&quot; title=&quot;算数基本定理&quot;&gt;&lt;/a&gt;算数基本定理&lt;/h2&gt;&lt;p&gt;定义：任何一个大于1的自然数，如果N不为质数，那么N可以分解成有限个质数的乘积，并且在不计次序的情况下，这种分解方式是唯一的。&lt;/p&gt;
&lt;p&gt;例如：60可以分解为 2^2 * 3 * 5&lt;/p&gt;
    
    </summary>
    
    
      <category term="算数基本定理" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/"/>
    
      <category term="容斥定理" scheme="https://boctorio.github.io/tags/%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86/"/>
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BFS与DFS</title>
    <link href="https://boctorio.github.io/2019/01/08/BFS%E4%B8%8EDFS/"/>
    <id>https://boctorio.github.io/2019/01/08/BFS与DFS/</id>
    <published>2019-01-08T14:02:47.000Z</published>
    <updated>2019-01-09T13:39:49.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BFS-宽度优先搜索"><a href="#BFS-宽度优先搜索" class="headerlink" title="BFS(宽度优先搜索)"></a>BFS(宽度优先搜索)</h3><p>宽度优先搜索算法（又称广度优先搜索算法）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。</p><p>他并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><a id="more"></a><p>举例：</p><p>由橙色位置出发，进行BFS：</p><p>​                           <img src="/2019/01/08/BFS与DFS/1.png" alt=""></p><p>灰色位置表示已经走过，橙色标示当前位置</p><p>首先进行第一步：</p><p>​                          <img src="/2019/01/08/BFS与DFS/2.png" alt=""></p><p>已经走过的位置，不需要再走了</p><p>进行第二步：</p><p>​                     <img src="/2019/01/08/BFS与DFS/3.png" alt=""></p><p>同上，状态继承，进行第三步：</p><p>​                                  <img src="/2019/01/08/BFS与DFS/4.png" alt=""></p><p>进行第四步，到达终点，当前步数表示最小步数：</p><p>​                             <img src="/2019/01/08/BFS与DFS/5.png" alt=""></p><p>对于一个迷宫而言，我们要进行的步骤是一样的。</p><p>​                                             <img src="/2019/01/08/BFS与DFS/m1.png" alt=""></p><p>蓝色是起点，红色是终点，黑色为障碍物。</p><p>第一步，我们可以走以下几步：</p><p>​                                             <img src="/2019/01/08/BFS与DFS/m2.png" alt=""></p><p>接下来依次为：</p><p><img src="/2019/01/08/BFS与DFS/m3.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m4.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m5.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m6.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m7.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m8.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m9.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m10.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m11.png" alt=""></p><p>当我们走到第十步时，走到了终点，因此，从起点到终点最少的步数即为10步。</p><p>接下来看一道基础的例题（HDU1242）Rescue：</p><blockquote><p>Problem Description</p><p>Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M &lt;= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.</p><p>Angel’s friends want to save Angel. Their task is: approach Angel. We assume that “approach Angel” is to get to the position where Angel stays. When there’s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.</p><p>You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)</p><p>Input</p><p>First line contains two integers stand for N and M.</p><p>Then N lines follows, every line has M characters. “.” stands for road, “a” stands for Angel, and “r” stands for each of Angel’s friend. </p><p>Process to the end of the file.</p><p>Output</p><p>For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing “Poor ANGEL has to stay in the prison all his life.” </p></blockquote><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">8</span></span><br><span class="line">#.#####.</span><br><span class="line">#.a#..r.</span><br><span class="line">#..<span class="meta">#x...</span></span><br><span class="line">..#..#.#</span><br><span class="line">#...##..</span><br><span class="line">.#......</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p>这个题大概的意思就是求从字符a出发，到达字符r的最少时间，其中 . 代表空地，#代表墙，x代表守卫，每杀死一个守卫我们就需要消耗一秒的时间。</p><p>这个题可以用BFS直接求解，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXN 510</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN][MAXN];<span class="comment">//用来储存地图 </span></span><br><span class="line"><span class="keyword">int</span> vis[MAXN][MAXN];<span class="comment">//用来标记已经走过的地点 </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(name i,name j)&#123;<span class="comment">//对走过的地点顺序进行排序 </span></span><br><span class="line"><span class="keyword">return</span> i.step&gt;j.step;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//表示行走的四个方向，顺序为右，左，上，下 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy,<span class="keyword">int</span> ex,<span class="keyword">int</span> ey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">priority_queue&lt;name&gt;que;<span class="comment">//使用队列用来储存上一步走过的地点 </span></span><br><span class="line">name e1,e2;</span><br><span class="line">e1.x=sx,e1.y=sy,e1.step=<span class="number">0</span>;</span><br><span class="line">que.push(e1);<span class="comment">//输入起点 </span></span><br><span class="line">vis[sx][sy]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>; </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())&#123;<span class="comment">//当队列为空时，即表示我们已经把所有的能走的地点都走了一遍 </span></span><br><span class="line">e1=que.top();<span class="comment">//将队列第一个地点的信息赋给e1； 此时e1即表示上一步走过的地点的信息 </span></span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span>(e1.x==ex &amp;&amp; e1.y==ey)&#123;<span class="comment">//对这个地点进行判断，看是否是是终点 </span></span><br><span class="line">ans=e1.step;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//如果e1不是终点，那么对e1的上下左右进行判断，如果可以走，那么就将信息储存在队列中 </span></span><br><span class="line">e2.x=e1.x+d[i][<span class="number">0</span>];</span><br><span class="line">e2.y=e1.y+d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(e2.x&lt;<span class="number">0</span> || e2.x&gt;=n || e2.y&lt;<span class="number">0</span> || e2.y&gt;=m) <span class="keyword">continue</span>;<span class="comment">//对边界进行判断，如果超出边界，则不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(vis[e2.x][e2.y]==<span class="number">1</span>) <span class="keyword">continue</span>;<span class="comment">//如果当前位置已经走过，那么就不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(str[e2.x][e2.y]==<span class="string">'#'</span>) <span class="keyword">continue</span>;<span class="comment">//如果是墙壁,不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(str[e2.x][e2.y]==<span class="string">'x'</span>) e2.step=e1.step+<span class="number">2</span>;<span class="comment">//如果是守卫的话，需要消耗两个单位时间 </span></span><br><span class="line"><span class="keyword">else</span> e2.step=e1.step+<span class="number">1</span>;<span class="comment">//如果是空地,一个单位时间 </span></span><br><span class="line">que.push(e2);<span class="comment">//将地点存入队列 </span></span><br><span class="line">vis[e2.x][e2.y]=<span class="number">1</span>;<span class="comment">//降低点进行标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Poor ANGEL has to stay in the prison all his life.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sx,sy,ex,ey;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//找寻起点和终点 </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i][j]==<span class="string">'a'</span>) sx=i,sy=j;</span><br><span class="line"><span class="keyword">if</span>(str[i][j]==<span class="string">'r'</span>) ex=i,ey=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS(sx,sy,ex,ey);<span class="comment">//开始BFS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，我们使用BFS的步骤为：</p><p><strong>1.对地图信息进行保存</strong></p><p><strong>2.找到起点和终点信息</strong></p><p><strong>3.从起点开始，对所走过的每一步进行判断</strong></p><p><strong>4.如果走的这一步可行，那么储存这一步的信息，并标记这个位置，表示不会再走到这个位置</strong></p><p><strong>5.如果不可行，那么就不进行操作</strong></p><p><strong>6.找到终点</strong></p><p>以上，即为BFS的功能。</p><h3 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h3><p>DFS的目的是要达到被搜索结构的叶结点。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><p>DFS的使用基础为递归，当我们顺着一个节点向下走时，如果走不下去了，就回溯，如果上一个节点还有其他的节点，那么我们就会对这个节点再进行搜索。</p><p>对于下面这个图</p><p><img src="/2019/01/08/BFS与DFS/d1.png" alt=""></p><p>首先我们将从第一个节点开始出发，然后搜索第二个节点，</p><p><img src="/2019/01/08/BFS与DFS/d2.png" alt=""></p><p>因为第二个节点下面还有第四个节点，因此我们继续向下搜索，</p><p><img src="/2019/01/08/BFS与DFS/d3.png" alt=""></p><p>第四个节点下面已经没有其他节点，因此我们回溯到第二个节点</p><p>第二个节点下面还有第五个节点，因此我们搜索第五个节点</p><p><img src="/2019/01/08/BFS与DFS/d4.png" alt=""></p><p>然后继续回溯，到第一个节点，</p><p>接下来就搜索第三个节点，第五个节点</p><p><img src="/2019/01/08/BFS与DFS/d5.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/d6.png" alt=""></p><p>当再次回溯到第一个节点时，已经没有其他的节点可进行搜索，因此搜索的过程到此结束，DFS也到此结束。</p><p>上面就是DFS的功能，DFS是对所有可能的结果进行一次彻底的搜索，这样会保证不会有任何情况会被遗漏。</p><p>接下来看一道例题（HDU1312）Red and Black：</p><blockquote><p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles. </p><p>Write a program to count the number of black tiles which he can reach by repeating the moves described above. </p><p>Input</p><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20. </p><p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows. </p><p>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set) </p><p>Output</p><p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). </p></blockquote><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">9</span></span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line"><span class="number">11</span> <span class="number">9</span></span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p>这个题的大概意思就是给你一个起点，你能够走到多少个地点。</p><p>其中 ‘ . ‘是空地，#是墙壁，@是起点。</p><p>接下来看一下代码，思想和BFS类似：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a) memset(a,0,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"><span class="keyword">char</span> mapp[N][N];<span class="comment">//储存地图 </span></span><br><span class="line"><span class="keyword">int</span> vis[N][N];<span class="comment">//标记位置 </span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//四个行走方向 </span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//检测不能走通的条件 </span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=n||y&lt;<span class="number">0</span>||y&gt;=m||mapp[x][y]==<span class="string">'#'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!check(x,y)||vis[x][y])&#123;<span class="comment">//如果不能走通，那么直接返回 </span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        sum++; </span><br><span class="line">        <span class="keyword">int</span> fx,fy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//在此节点的基础上，再对周围四个节点进行判断 </span></span><br><span class="line">            vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">            fx = x + dx[i];</span><br><span class="line">            fy = y + dy[i];</span><br><span class="line">            DFS(fx,fy);<span class="comment">//此处使用递归求解 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF&amp;&amp;(n||m))&#123;</span><br><span class="line">        clr(mapp);clr(vis);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mapp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mapp[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">                    DFS(i,j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们可以看出，DFS的使用方法为：</p><p><strong>1.找出起点</strong></p><p><strong>2.对起点四个方向的状态进行判断，如果是空地，就进行递归，继续对这四个方向的位置的四周进行判断，如果不是空地，就结束递归</strong></p><p><strong>3.输出结果</strong></p><p>DFS与BFS有很多相似的地方，不过BFS求的是最短路，DFS求的是方案数，我们可以根据题目要求选择这两种方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;BFS-宽度优先搜索&quot;&gt;&lt;a href=&quot;#BFS-宽度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;BFS(宽度优先搜索)&quot;&gt;&lt;/a&gt;BFS(宽度优先搜索)&lt;/h3&gt;&lt;p&gt;宽度优先搜索算法（又称广度优先搜索算法）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。&lt;/p&gt;
&lt;p&gt;他并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://boctorio.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://boctorio.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="https://boctorio.github.io/2019/01/08/%E5%89%8D%E8%A8%80/"/>
    <id>https://boctorio.github.io/2019/01/08/前言/</id>
    <published>2019-01-08T05:49:42.000Z</published>
    <updated>2019-01-08T05:57:45.359Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经是2019年。我加入HPU-ACM（现为算法协会）是在18年3月份左右，虽然时间不长，但是已经成为这个大家庭的一份子了。经过了近一年的学习与比赛，我觉得收获了很多，但是回头一想，却又想不起来我到底学过了多少的东西。看着协会里的成员一个个的在努力，在进步，我也希望能够继续深入学习，在ACM的路上走的更远。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在已经是2019年。我加入HPU-ACM（现为算法协会）是在18年3月份左右，虽然时间不长，但是已经成为这个大家庭的一份子了。经过了近一年的学习与比赛，我觉得收获了很多，但是回头一想，却又想不起来我到底学过了多少的东西。看着协会里的成员一个个的在努力，在进步，我也希望能够
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My First Blog</title>
    <link href="https://boctorio.github.io/2019/01/07/First%20blog/"/>
    <id>https://boctorio.github.io/2019/01/07/First blog/</id>
    <published>2019-01-07T14:19:17.000Z</published>
    <updated>2019-01-08T13:16:26.736Z</updated>
    
    <content type="html"><![CDATA[<p>纪念我的第一篇博客 ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;纪念我的第一篇博客 ^_^&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
