<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boctorio&#39;s Blog</title>
  
  <subtitle>欢迎访问我校OJ   https://hpuoj.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://boctorio.github.io/"/>
  <updated>2019-09-06T04:54:36.903Z</updated>
  <id>https://boctorio.github.io/</id>
  
  <author>
    <name>Boctorio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018CCPC吉林站部分题解</title>
    <link href="https://boctorio.github.io/2019/09/06/2018CCPC%E5%90%89%E6%9E%97%E7%AB%99%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>https://boctorio.github.io/2019/09/06/2018CCPC吉林站部分题解/</id>
    <published>2019-09-06T03:25:50.000Z</published>
    <updated>2019-09-06T04:54:36.903Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在刷知乎的时候看到吉老师对这套题赞誉有加，因此特来做做试试。水平有限，能力一般。</p><a id="more"></a><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6555" target="_blank" rel="noopener">A.The Fool</a></p><p>题目大意为：求$\sum_{i=1}^{n}{\frac{n}{i}}$ 的值。$(n\leq 1e9)$</p><p>这道题还算简单，直接按照$\frac{n}{i}$的值分块计算即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(ll q=<span class="number">1</span>;q&lt;=t;q++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;)&#123;</span><br><span class="line">            sum+=(n/i)*(n/(n/i)-i+<span class="number">1</span>);</span><br><span class="line">            i=n/(n/i)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %lld: "</span>,q);</span><br><span class="line">        <span class="keyword">if</span>(sum&amp;<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"odd\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"even\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6556" target="_blank" rel="noopener">B.The World</a></p><p>题目大意为：给你一个地区的时间，让你求另一个地区的时间。</p><p>不算很难的题目，直接模拟计算即可。细节比较多，需要多处理处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">0</span>;</span><br><span class="line">    a[<span class="string">'L'</span>-<span class="string">'A'</span>]=<span class="number">0</span>;</span><br><span class="line">    a[<span class="string">'M'</span>-<span class="string">'A'</span>]=<span class="number">3</span>;</span><br><span class="line">    a[<span class="string">'W'</span>-<span class="string">'A'</span>]=<span class="number">-5</span>;</span><br><span class="line">    a[<span class="string">'B'</span>-<span class="string">'A'</span>]=<span class="number">8</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,++cas);</span><br><span class="line">        <span class="keyword">int</span> hour=<span class="number">0</span>,minu=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;s[<span class="number">0</span>][j];j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>][j]==<span class="string">':'</span>)&#123;flag=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                hour=hour*<span class="number">10</span>+s[<span class="number">0</span>][j]-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                minu=minu*<span class="number">10</span>+s[<span class="number">0</span>][j]-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x=a[s[<span class="number">3</span>][<span class="number">0</span>]-<span class="string">'A'</span>]-a[s[<span class="number">2</span>][<span class="number">0</span>]-<span class="string">'A'</span>];</span><br><span class="line">        <span class="keyword">int</span> tmp=hour;</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="number">12</span>)tmp=<span class="number">0</span>;</span><br><span class="line">        hour=(hour+x+<span class="number">12</span>)%<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">if</span>(hour==<span class="number">0</span>)hour=<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Today %s %s\n"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp+x&lt;<span class="number">12</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Today %d:%02d %s\n"</span>,hour,minu,s[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'A'</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp+x&lt;<span class="number">24</span>)<span class="built_in">printf</span>(<span class="string">"Today %d:%02d PM\n"</span>,hour,minu);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Tomorrow %d:%02d AM\n"</span>,hour,minu);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp+x==<span class="number">24</span>)<span class="built_in">printf</span>(<span class="string">"Tomorrow %d:%02d PM\n"</span>,hour,minu);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Tomorrow %d:%02d AM\n"</span>,hour,minu);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp+x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Today %d:%02d %s\n"</span>,hour,minu,s[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'A'</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp+x&gt;=<span class="number">-12</span>)<span class="built_in">printf</span>(<span class="string">"Yesterday %d:%02d PM\n"</span>,hour,minu);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Yesterday %d:%02d AM\n"</span>,hour,minu);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp+<span class="number">12</span>+x&gt;=<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"Today %d:%02d AM\n"</span>,hour,minu);</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Yesterday %d:%02d PM\n"</span>,hour,minu);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6557" target="_blank" rel="noopener">C.Justice</a></p><p>题目大意为，给你一堆数字，每个数字代表一个值$\frac{1}{2^x}$，问能否将其分成两堆，使得每堆值之和大于等于$\frac{1}{2}$ 。</p><p>一个稍微复杂一点的题目，首先我们需要判断所有数的和是否超过1，超过即有解，否则无解。若有解，则设置一个变量，作为两堆之间的差值，然后均分即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,pos;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"><span class="keyword">int</span> T,n,u;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node i,node j)</span></span>&#123;<span class="keyword">return</span> i.x&lt;j.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) que.push(a[i].x);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(que.top()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        x=que.top();que.pop();</span><br><span class="line">        <span class="keyword">if</span>(!que.empty())&#123;</span><br><span class="line">            y=que.top();</span><br><span class="line">            que.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==y) que.push(x<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> que.push(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">if</span>(!check()) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].x-a[i<span class="number">-1</span>].x&gt;<span class="number">17</span> || <span class="built_in">abs</span>(sum)&gt;=<span class="number">1e6</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;<span class="number">0</span>) sum=min(<span class="number">1e9</span>,sum*<span class="built_in">pow</span>(<span class="number">2</span>,a[i].x-a[i<span class="number">-1</span>].x));</span><br><span class="line">            <span class="keyword">else</span> sum=max(<span class="number">-1e9</span>,sum*<span class="built_in">pow</span>(<span class="number">2</span>,a[i].x-a[i<span class="number">-1</span>].x));</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">                res[a[i].pos]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> sum-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].x);</span><br><span class="line">            a[i].pos=i;</span><br><span class="line">            res[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,t);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6558" target="_blank" rel="noopener">D.The Moon</a></p><p>题目大意为：你在玩一个游戏，获胜的概率为p%,然后给你游戏的操作：</p><blockquote><p>step0: 初始中奖率为q=2%;<br>step1: 玩家以p%的获胜率玩一局游戏;<br>step2: 玩家获胜转到step3,否则转到step4;<br>step3: 玩家抽奖，如果没中奖，获奖率提高2%，上限100%，转到step1;<br>step4: 获奖概率提高1.5%，转到step1;</p></blockquote><p>问抽中奖时玩的游戏的局数的期望。</p><p>这个题是个比较简单的概率dp，$dp[i]$表示在获胜概率为$i\%$时的期望局数，由于1.5%不是一个整数，所以将所有的值扩大二倍，初始$dp[200]=\frac{1}{p}$然后就可以写出转移方程：<br>$$<br>dp[i]=p*(1-\frac{1}{i})*dp[min(i+4,200)]+(1-p)*dp[min(i+3,200)]+1;<br>$$<br>其中前一部分表示获胜没抽中奖的期望，后一部分表示没获胜的期望，最后需要+1表示又玩了这一局。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++)&#123;</span><br><span class="line">        <span class="keyword">double</span> p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;p);</span><br><span class="line">        p/=<span class="number">100</span>;</span><br><span class="line">        dp[<span class="number">200</span>]=<span class="number">1</span>/p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">199</span>;i&gt;=<span class="number">4</span>;i--)&#123;</span><br><span class="line">            dp[i]=p*(<span class="number">1.0</span>-i/<span class="number">200.0</span>)*dp[min(<span class="number">200</span>,i+<span class="number">4</span>)]+(<span class="number">1.0</span>-p)*dp[min(<span class="number">200</span>,i+<span class="number">3</span>)]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %.10lf\n"</span>,t,dp[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6559" target="_blank" rel="noopener">E.The Tower</a></p><p>题目大意为：已知底面半径为$r$，高为$h$的圆锥，给你一个点$(x_0,y_0,z_0)$，它的速度为$(v_x,v_y,v_z)$ ，问这个点与圆锥相交的最短时间为多少。</p><p>几何题，首先知道圆锥的方程为$x^2+y^2=r^2\frac{(h-z)^2}{h^2}$ ，然后假设点与圆锥相交的点为$(x_0+v_xt,y_0+v_yt,z_0+v_zt)$，然后带入方程求解即可：<br>$$<br>x^2+y^2=r^2\frac{(h-z)^2}{h^2} \\<br>(x_0+v_xt)^2+(y_0+v_yt)^2=r^2\frac{(h-z_0-v_zt)^2}{h^2} \\<br>x_0^2+2x_0v_xt+v_x^2t^2+y_0^2+2y_0v_yt+v_y^2t^2=r^2\frac{h^2+z_0^2+v_z^2t^2-2hz_0-2hv_zt+2z_0v_zt}{h^2} \\<br>h^2x_0^2+2h^2x_0v_xt+h^2v_x^2t^2+h^2y_0^2+2h^2y_0v_yt+h^2v_y^2t^2=r^2h^2+r^2z_0^2+r^2v_z^2t^2-2r^2hz_0-2r^2hv_zt+2r^2z_0v_zt \\<br>(h^2v_x^2+h^2v_y^2-r^2v_z^2)t^2+(2h^2x_0v_x+2h^2y_0v_y+2r^2hv_z-2r^2z_0v_z)t+(h^2x_0^2+h^2y_0^2-r^2h^2-r^2z_0^2+2r^2hz_0)=0<br>$$<br>解完以后就可以按照一元二次方程组的方式进行求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++)&#123;</span><br><span class="line">        <span class="keyword">double</span> r,h,x0,y0,z0,vx,vy,vz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>,&amp;r,&amp;h);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span>,&amp;x0,&amp;y0,&amp;z0);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf"</span>,&amp;vx,&amp;vy,&amp;vz);</span><br><span class="line">        <span class="keyword">double</span> a=h*h*vx*vx+h*h*vy*vy-r*r*vz*vz;</span><br><span class="line">        <span class="keyword">double</span> b=<span class="number">2</span>*h*h*x0*vx+<span class="number">2</span>*h*h*y0*vy+<span class="number">2</span>*r*r*h*vz<span class="number">-2</span>*r*r*z0*vz;</span><br><span class="line">        <span class="keyword">double</span> c=h*h*x0*x0+h*h*y0*y0-r*r*h*h-r*r*z0*z0+<span class="number">2</span>*r*r*h*z0;</span><br><span class="line">        <span class="keyword">double</span> t1=(-b+<span class="built_in">sqrt</span>(b*b<span class="number">-4</span>*a*c))/(<span class="number">2.0</span>*a);</span><br><span class="line">        <span class="keyword">double</span> t2=(-b-<span class="built_in">sqrt</span>(b*b<span class="number">-4</span>*a*c))/(<span class="number">2.0</span>*a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,t);</span><br><span class="line">        <span class="keyword">if</span>(t2&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,t2);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在刷知乎的时候看到吉老师对这套题赞誉有加，因此特来做做试试。水平有限，能力一般。&lt;/p&gt;
    
    </summary>
    
      <category term="CCPC" scheme="https://boctorio.github.io/categories/CCPC/"/>
    
    
  </entry>
  
  <entry>
    <title>The beautiful values of the palace--2019ICPC南昌网络赛A题</title>
    <link href="https://boctorio.github.io/2019/09/03/The-beautiful-values-of-the-palace-2019ICPC%E5%8D%97%E6%98%8C%E7%BD%91%E7%BB%9C%E8%B5%9BA%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/09/03/The-beautiful-values-of-the-palace-2019ICPC南昌网络赛A题/</id>
    <published>2019-09-03T08:26:04.000Z</published>
    <updated>2019-09-03T11:50:30.277Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/41298" target="_blank" rel="noopener">题目链接</a><br>一个比较经典的树状数组题目。<br>题目大意为:</p><blockquote><p>给你一个$n*n$的蛇形填数方阵，指定其中$m$个位置，其值更改为十进制下各位之和，其余各数不做计算。$p$次询问，每次询问一个矩阵内的所有数的总和，这个矩阵左下角坐标为$[x1,y1]$,右上角坐标为$[x2,y2]$。</p></blockquote><a id="more"></a><p>这个题的做法就是利用树状数组以及前缀和，对于一个矩阵，它的所有元素的总和为$sum[x2][y2]-sum[x2][y1-1]-sum[x1-1][y2]+sum[x1-1][y1-1]$ ,因此我们需要求出这四个坐标所对应的左下角坐标为$[1,1]$ 的矩阵的元素总和，因此，我们可以将这$4*p$个坐标和$m$个位置一起放入一个数组中，然后统一排序作计算。先按照纵坐标从小到大排序，纵坐标相同按照横坐标从小到大排序，横坐标也相同则按照位置优先，矩阵最后的原则排序然后遍历进行计算即可。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll h=<span class="number">1e7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span> ll x,y,val; &#125;v[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span> ll x1,y1,x2,y2; &#125;e[maxn];</span><br><span class="line">ll num[maxn];</span><br><span class="line">ll n,m,p;</span><br><span class="line"><span class="function">ll <span class="title">lowbit</span><span class="params">(ll x)</span></span>&#123; <span class="keyword">return</span> x&amp;(-x); &#125;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="comment">//计算(x,y)处的值</span></span><br><span class="line">    x=x-n/<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">    y=y-n/<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">    ll t=max(<span class="built_in">abs</span>(x),<span class="built_in">abs</span>(y));</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=y) <span class="keyword">return</span> n*n<span class="number">-4</span>*t*t<span class="number">-2</span>*t-x-y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n*n<span class="number">-4</span>*t*t+<span class="number">2</span>*t+x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">bits</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node i,node j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i.y==j.y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.x==j.x)</span><br><span class="line">            <span class="keyword">return</span> i.val&gt;j.val;</span><br><span class="line">        <span class="keyword">return</span> i.x&lt;j.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i.y&lt;j.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;maxn)&#123;</span><br><span class="line">        num[x]+=q;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res+=num[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;ll,ll&gt;mp;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;v[i].x,&amp;v[i].y);</span><br><span class="line">            v[i].val=cal(v[i].x,v[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>,&amp;e[i].x1,&amp;e[i].y1,&amp;e[i].x2,&amp;e[i].y2);</span><br><span class="line">            v[m].x=e[i].x1<span class="number">-1</span>;v[m].y=e[i].y1<span class="number">-1</span>;v[m++].val=<span class="number">0</span>;</span><br><span class="line">            v[m].x=e[i].x1<span class="number">-1</span>;v[m].y=e[i].y2;v[m++].val=<span class="number">0</span>;</span><br><span class="line">            v[m].x=e[i].x2;v[m].y=e[i].y1<span class="number">-1</span>;v[m++].val=<span class="number">0</span>;</span><br><span class="line">            v[m].x=e[i].x2;v[m].y=e[i].y2;v[m++].val=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v,v+m,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i].val) add(v[i].x,bits(v[i].val));</span><br><span class="line">            <span class="keyword">else</span> mp[v[i].x*h+v[i].y]=query(v[i].x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mp[e[i].x2*h+e[i].y2]-mp[(e[i].x2)*h+e[i].y1<span class="number">-1</span>]-mp[(e[i].x1<span class="number">-1</span>)*h+e[i].y2]+mp[(e[i].x1<span class="number">-1</span>)*h+e[i].y1<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;一个比较经典的树状数组题目。&lt;br&gt;题目大意为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个$n*n$的蛇形填数方阵，指定其中$m$个位置，其值更改为十进制下各位之和，其余各数不做计算。$p$次询问，每次询问一个矩阵内的所有数的总和，这个矩阵左下角坐标为$[x1,y1]$,右上角坐标为$[x2,y2]$。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树状数组" scheme="https://boctorio.github.io/categories/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>super_log--2019ICPC南昌网络赛B题</title>
    <link href="https://boctorio.github.io/2019/09/01/super-log/"/>
    <id>https://boctorio.github.io/2019/09/01/super-log/</id>
    <published>2019-09-01T11:26:35.000Z</published>
    <updated>2019-09-01T12:29:31.370Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/41299" target="_blank" rel="noopener">题目链接</a><br>这道题的意思转化过来就是求$a^{a^{a^{a^{…}}}}mod \space m$(共b个a)的值。</p><a id="more"></a><p>这个题从比赛开始我就在看，一直看到比赛结束都没写出来，最后终于在晚些时候写出来了。</p><p>这道题并不是特别难的题，主要就是里面一些细节不好处理。这道题利用的算法就是欧拉定理，在求最底层的$a$的指数时，我们可以先求$a$的指数的指数，然后依次递归求每层的指数，在递归的过程中，可以利用欧拉降幂来简化指数。在这之前先需要了解以下<strong>扩展欧拉定理</strong>：<br>$$<br>a^c=\begin{cases}<br>a^{c \space mod \space \phi(m)} \space \space \space \space \space \space \space \space gcd(a,m)=1 \\<br>a^c \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space \space gcd(a,m)\neq 1,c&lt;\phi(m) \\<br>a^{c \space mod \space \phi(m)+\phi(m)} gcd(a,m)\neq 1 ,c\geq \phi(m)<br>\end{cases}<br>$$<br>由扩展欧拉定理我们就可以去递归求解了。首先要打一个欧拉函数的表，然后对于每一层，我们需要去计算它的指数是否大于$\phi(m)$,判断的方法就是暴力，然后就完了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3000000</span>+<span class="number">10</span>;</span><br><span class="line">ll phi[maxn],chk[maxn],tot,pri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getphi</span><span class="params">()</span> </span>&#123;<span class="comment">//欧拉函数打表</span></span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">2000000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!chk[i]) &#123;</span><br><span class="line">            pri[++tot]=i;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=<span class="number">2000000</span>;j++) &#123;</span><br><span class="line">            chk[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                phi[i*pri[j]]=phi[i]*pri[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                phi[i*pri[j]]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a,ll b,ll m)</span> </span>&#123;<span class="comment">//检查是否需要对指数进行添加</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>&gt;=m;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">1</span>) <span class="keyword">return</span> a&gt;=m;</span><br><span class="line">    ll q=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b<span class="number">-1</span>;i++)&#123;<span class="comment">//这里暴力判断是否大于phi[m]</span></span><br><span class="line">        ll x=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a;j++)&#123;</span><br><span class="line">            x*=q;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll a,ll b,ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//特判三种情况</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">1</span>) <span class="keyword">return</span> a%m;</span><br><span class="line">    <span class="comment">//递归求解</span></span><br><span class="line">    <span class="keyword">if</span>(check(a,b<span class="number">-1</span>,phi[m])) <span class="keyword">return</span> qp(a,dfs(a,b<span class="number">-1</span>,phi[m])+phi[m],m);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> qp(a,dfs(a,b<span class="number">-1</span>,phi[m]),m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getphi();</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll a,b,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a,&amp;b,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(a,b,m)%m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/41299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;这道题的意思转化过来就是求$a^{a^{a^{a^{…}}}}mod \space m$(共b个a)的值。&lt;/p&gt;
    
    </summary>
    
      <category term="欧拉函数" scheme="https://boctorio.github.io/categories/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Next 添加相册</title>
    <link href="https://boctorio.github.io/2019/08/27/Hexo-Next-%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/"/>
    <id>https://boctorio.github.io/2019/08/27/Hexo-Next-添加相册/</id>
    <published>2019-08-27T04:26:28.000Z</published>
    <updated>2019-08-27T05:43:53.721Z</updated>
    
    <content type="html"><![CDATA[<p>此教程以Github为图库添加相册。</p><a id="more"></a><h3 id="创建图片仓库-处理图片"><a href="#创建图片仓库-处理图片" class="headerlink" title="创建图片仓库+处理图片"></a>创建图片仓库+处理图片</h3><h4 id="创建图片仓库"><a href="#创建图片仓库" class="headerlink" title="创建图片仓库"></a>创建图片仓库</h4><p>在本地任意位置创建一个文件夹用来储存图片。在文件夹下创建两个文件夹<strong>photos,min_photos​</strong>,将需要上传的图片放在<strong>photos</strong>文件夹下，图片命名方式为<strong>yyyy-mm-dd_name.jpg/png/…</strong>。</p><p>在<strong>github</strong>上创建一个新的仓库，名字任意。</p><p>打开<strong>git</strong>，<strong>cd</strong>至此文件夹，执行命令上传至仓库：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init https:<span class="comment">//yourgithublink</span></span><br></pre></td></tr></table></figure><h4 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h4><p>下载脚本<a href="https://github.com/boctorio/photo_hub/blob/master/tool.py" target="_blank" rel="noopener">tool.py</a>文件至此文件内，此文件需要<a href="https://github.com/boctorio/photo_hub/blob/master/ImageProcess.py" target="_blank" rel="noopener">Imageprocessing.py</a>文件的支持，<strong>tool.py</strong> 中第134行左右的链接更改为接下来要创建的文件夹的地址.</p><p>执行<strong>tool.py</strong>的时候如果没有<strong>PIL</strong>库的话会报错，安装即可。安装<strong>PIL</strong>只需在<strong>cmd</strong>中执行：<code>pip install Pillow</code>就可以了。</p><p>此外图片命名方式需要按照特定方式即：<strong>2017-02-02_discriptionofyourpic.jpg</strong>，图片的格式支持常见格式，时间和描述之间存在下划线。</p><h3 id="添加博客相册界面"><a href="#添加博客相册界面" class="headerlink" title="添加博客相册界面"></a>添加博客相册界面</h3><p>git 执行命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page photos</span><br></pre></td></tr></table></figure><p>在主题目录<strong>_config.yml</strong> 中添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  photos: /photos/ || camera</span><br></pre></td></tr></table></figure><p>在<strong>photos</strong>文件夹下的<strong>index.md</strong>中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 照片</span><br><span class="line">date: 2018-09-02 21:00:00</span><br><span class="line">type: photos</span><br><span class="line">fancybox: false</span><br><span class="line">comments: true</span><br><span class="line">---</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./ins.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./photoswipe.css&quot;&gt; </span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./default-skin/default-skin.css&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;photos-btn-wrap&quot;&gt;</span><br><span class="line">  &lt;a class=&quot;photos-btn active&quot; href=&quot;javascript:void(0)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Photos&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;instagram itemscope&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;https://boctorio.com&quot; target=&quot;_blank&quot; class=&quot;open-ins&quot;&gt;图片正在加载中…&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  (function() &#123;</span><br><span class="line">    var loadScript = function(path) &#123;</span><br><span class="line">      var $script = document.createElement(&apos;script&apos;)</span><br><span class="line">      document.getElementsByTagName(&apos;body&apos;)[0].appendChild($script)</span><br><span class="line">      $script.setAttribute(&apos;src&apos;, path)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        loadScript(&apos;./ins.js&apos;)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;)()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<strong>photos</strong>文件夹中添加下列文件<a href="https://github.com/boctorio/boctorio.github.io/tree/master/photos" target="_blank" rel="noopener">photos</a></p><p>其中<strong>ins.js</strong> 中第122行左右两个链接要更改为你的图片链接，注意链接开头一定要为https: //raw.githubusercontent.com 的形式，检查链接是否正确的方法就是将图片链接放在浏览器上看是否打开。</p><p>将<a href="https://github.com/boctorio/boctorio.github.io/blob/master/js/src/photoswipe.min.js" target="_blank" rel="noopener">photoswipe.min.js</a> ,<a href="https://github.com/boctorio/boctorio.github.io/blob/master/js/src/photoswipe-ui-default.min.js" target="_blank" rel="noopener">photoswipe-ui-default.min.js</a> 两个文件加入到themes/next/source/js/src中</p><p>接下来需要将刚才下载好的文件进行引用，在next/layout/_layout.swig的​head中引用<strong>js</strong>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<strong>body</strong>中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.type === "photos" %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在/themes/next/layout/_scripts/pages/post-details.swig中添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样相册就完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此教程以Github为图库添加相册。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://boctorio.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>二次剩余</title>
    <link href="https://boctorio.github.io/2019/08/16/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    <id>https://boctorio.github.io/2019/08/16/二次剩余/</id>
    <published>2019-08-16T01:04:46.000Z</published>
    <updated>2019-08-16T12:49:56.383Z</updated>
    
    <content type="html"><![CDATA[<p>二次剩余（<strong>Quadratic residue</strong>）是数论基本概念之一。它是初等数论中非常重要的结果，不仅可用来判断二次同余式是否有解，还有很多用途。</p><a id="more"></a><p>二次剩余的定义为：</p><blockquote><p>当存在某个整数 $x$ ，使得式子$x^2\space \equiv d \space (mod\space p)$ 成立时，称“$d$是模$p$的二次剩余”。<br>当对任意 $x$ 均不成立时，称“$d$是模$p$的二次非剩余”。</p></blockquote><h3 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h3><h4 id="二次剩余个数"><a href="#二次剩余个数" class="headerlink" title="二次剩余个数"></a>二次剩余个数</h4><p>这是一个二次剩余的基本概念：</p><blockquote><p>关于 $n$ 的二次剩余个数不会超过 $(n+1)/2$ ,因为$(a^2 \equiv (n-a)^2 \space mod \space n)$。</p></blockquote><p>接下来我们先讨论质数的二次剩余</p><h4 id="质数二次剩余"><a href="#质数二次剩余" class="headerlink" title="质数二次剩余"></a>质数二次剩余</h4><p>对于质数2，所有的数均为它的二次剩余。</p><p>以下讨论p为奇质数的情况：</p><p>每一个奇质数都有$(p+1)/2$ 个二次剩余，有 $(p-1)/2$ 个二次非剩余，其二次剩余非别为：<br>$$<br>0^2,1^2,\cdots ,(\frac{p-1}{2}-1)^2,(\frac{p-1}{2})^2<br>$$<br>证明过程如下：</p><blockquote><p>假设$a,b(0 \leq a &lt; b \leq \frac{p-1}{2})$ ,$a^2 \equiv b^2 \equiv x \space mod \space p$, $c=a-b$.则：<br>$$<br>b^2 \equiv (a+c)^2 \equiv a^2+2ac+c^2 \space mod \space p \\<br>\because a^2 \equiv x \space mod \space p \\<br>\therefore 2ac+c^2 \equiv 0 \space mod \space p \\<br>c(2a+c) \equiv 0 \space mod \space p \\<br>c(a+b) \equiv 0 \space mod \space p \\<br>\because a+b&lt;p ,c&lt;p \\<br>\therefore c(a+b) \equiv 0 \space mod \space p 不成立 \\<br>\therefore a^2 \equiv b^2 \equiv x \space mod \space p 不成立\\<br>$$</p></blockquote><p>这样就可以证明上面$\frac{p+1}{2}$ 个二次剩余均不相同，且一定将所有的二次剩余全部枚举出来了。</p><h4 id="二次剩余判断"><a href="#二次剩余判断" class="headerlink" title="二次剩余判断"></a>二次剩余判断</h4><p>对于一个数d是不是奇质数p的二次剩余，可以用欧拉准则来判断。</p><p>欧拉准则在此处的应用为：</p><blockquote><p>如果$d^{\frac{p-1}{2}} \equiv 1 \space mod \space p$  ,则$d$是$p$的二次剩余；<br>如果$d^{\frac{p-1}{2}} \equiv -1 \space mod \space p$，则$d$是$p$的二次非剩余。</p></blockquote><p>（具体证明我也不会）</p><h4 id="二次剩余反推"><a href="#二次剩余反推" class="headerlink" title="二次剩余反推"></a><strong>二次剩余反推</strong></h4><p>对于式子$x^2\space \equiv d \space (mod\space p)$ ，已知$d,p$,如何求$x$ ？</p><p>具体过程为：</p><blockquote><ol><li><p>随机一个整数 $t(1\leq t &lt;p)$ ，使得 $t^2-d$ 是 $p$ 的二次非剩余，由于二次剩余个数和二次非剩余个数五五开，因此求解出来 $t$ 的期望次数很少。</p></li><li><p>令$\omega=\sqrt{t^2-d}$ ,则$x={(t+\sqrt{\omega})}^{\frac{p+1}{2}}$ 。</p></li></ol></blockquote><p>证明如下：</p><blockquote><p>对于$(t+\sqrt{\omega})^p$ ,当p为奇素数，根据二项式定理$(t+\sqrt{\omega})^p \equiv (t^p+\sqrt{\omega} ^p) \space mod \space p$ ,根据费马小定理，$t^p \equiv t \space mod \space p$，根据之前的判断方法，可知$\omega^\frac{p-1}{2} \equiv -1 \space mod \space p$, 所以$\sqrt{\omega}^p \equiv\omega^{\frac{p-1}{2}}*\sqrt{\omega} \equiv -\sqrt{\omega} \space mod \space p$ ，因此$(t+\sqrt{\omega})^p \equiv (t-\sqrt{\omega}) \space mod \space p$。<br>此时：<br>$$<br>(t+\sqrt{\omega})^{p+1} \equiv (t-\sqrt{\omega})(t+\sqrt{\omega}) \\<br>\equiv t^2-\omega \\<br>\space \space \space \equiv d \space mod \space p<br>$$<br>即：<br>$$<br>x^2 \equiv (t+\sqrt{\omega})^{p+1} \space mod \space p \\<br>x \equiv (t+\sqrt{\omega})^{\frac{p+1}{2}} \space mod \space p<br>$$</p></blockquote><p>但是可以发现的一点是，$\omega^{p-1}\equiv (\sqrt{t^2-d})^{p-1}\equiv (t^2-d)^{\frac{p-1}{2}} \equiv -1 \space mod \space p$  ,$\omega^p\equiv -\omega \space mod \space p$ ,这在实数域是不能实现的，换句话说，$\omega$ 是复数域的一个值。因此我们不能用实数的方法去求解，需要利用复数来求解（口胡过去了，我其实也不会写，以后慢慢填坑）。</p><p>代码实现（返回较小的解）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    x%=mod;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)res=res*x%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Quadratic_residue</span><span class="params">(<span class="keyword">const</span> ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    ll b=(rand()&lt;&lt;<span class="number">14</span>^rand())%mod;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(b,(mod<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>)!=mod<span class="number">-1</span>)b=(rand()&lt;&lt;<span class="number">14</span>^rand())%mod;</span><br><span class="line">    </span><br><span class="line">    ll s=mod<span class="number">-1</span>,t=<span class="number">0</span>,x,inv=<span class="built_in">pow</span>(d,mod<span class="number">-2</span>),f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(s&amp;<span class="number">1</span>))s&gt;&gt;=<span class="number">1</span>,t++,f&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    t--,x=<span class="built_in">pow</span>(d,(s+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>),f&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t)&#123;</span><br><span class="line">        f&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span>((inv*x%mod*x%mod),f)!=<span class="number">1</span>)x=x*<span class="built_in">pow</span>(b,s)%mod;</span><br><span class="line">        t--,s&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(x,mod-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二次剩余（&lt;strong&gt;Quadratic residue&lt;/strong&gt;）是数论基本概念之一。它是初等数论中非常重要的结果，不仅可用来判断二次同余式是否有解，还有很多用途。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="https://boctorio.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="二次剩余" scheme="https://boctorio.github.io/categories/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Quadratic equation--2019牛客暑期多校训练营(第九场)-B题</title>
    <link href="https://boctorio.github.io/2019/08/16/Quadratic-equation-2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B9%9D%E5%9C%BA-B%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/08/16/Quadratic-equation-2019牛客暑期多校训练营-第九场-B题/</id>
    <published>2019-08-16T00:28:11.000Z</published>
    <updated>2019-08-16T01:09:58.241Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/889/B" target="_blank" rel="noopener">题目链接（暂未开放）</a></p><p>题目大意为：</p><blockquote><p>给你一个数 $p=1e9+7$ ,以及两个式子$(x+y)\space mod \space p=b$,$(x*y)\space mod \space p=c$,给你 $b,c$ 的值$(0 \leq b,c &lt; p)$，求出满足条件的$x,y$ 的值$(0\leq x \leq y &lt; p)$，如果不存在，则输出 “-1 -1”。</p><a id="more"></a><p>样例输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">10</span></span><br><span class="line">&gt; <span class="number">4</span> <span class="number">4</span></span><br><span class="line">&gt; <span class="number">5</span> <span class="number">6</span></span><br><span class="line">&gt; <span class="number">10</span> <span class="number">10</span></span><br><span class="line">&gt; <span class="number">10</span> <span class="number">25</span></span><br><span class="line">&gt; <span class="number">20000</span> <span class="number">100000000</span></span><br><span class="line">&gt; <span class="number">0</span> <span class="number">5</span></span><br><span class="line">&gt; <span class="number">3</span> <span class="number">6</span></span><br><span class="line">&gt; <span class="number">220</span> <span class="number">284</span></span><br><span class="line">&gt; <span class="number">0</span> <span class="number">1</span></span><br><span class="line">&gt; <span class="number">1000000000</span> <span class="number">1000000000</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>样例输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">2</span> <span class="number">2</span></span><br><span class="line">&gt; <span class="number">2</span> <span class="number">3</span></span><br><span class="line">&gt; <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line">&gt; <span class="number">5</span> <span class="number">5</span></span><br><span class="line">&gt; <span class="number">10000</span> <span class="number">10000</span></span><br><span class="line">&gt; <span class="number">474848249</span> <span class="number">525151758</span></span><br><span class="line">&gt; <span class="number">352077071</span> <span class="number">647922939</span></span><br><span class="line">&gt; <span class="number">448762649</span> <span class="number">551237578</span></span><br><span class="line">&gt; <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line">&gt; <span class="number">366417496</span> <span class="number">633582504</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>又是一个奇妙的数学问题。对于题上的两个式子，我们可以通过化简得出：<br>$$<br>(x+y)^2\space mod \space p=b^2\space mod\space p\\<br>(x-y)^2\space mod \space p=((x+y)^2-4(x*y))\space mod \space p=(b^2-4c)\space mod \space p<br>$$<br>这样，我们只要计算出$x-y$的值，又已知$x+y$的值，就能计算出$x,y$的值。假设$x-y=a$,现在的问题为：</p><blockquote><p>已知 $a^2\space mod\space p=n$ , 已知 $p,n$ ,求 $a$ 的值。</p></blockquote><p>这个问题可以用<a href="">二次剩余来做</a>。<br>求解出来 $x-y$ 的值之后，这个问题就基本解决了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll x,T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    x%=mod;</span><br><span class="line">    <span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=(ll)x*x%mod)<span class="keyword">if</span>(y&amp;<span class="number">1</span>)res=(ll)res*x%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Quadratic_residue</span><span class="params">(<span class="keyword">const</span> ll a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll b=(rand()&lt;&lt;<span class="number">14</span>^rand())%mod;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>(b,(mod<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>)!=mod<span class="number">-1</span>)b=(rand()&lt;&lt;<span class="number">14</span>^rand())%mod;</span><br><span class="line">    ll s=mod<span class="number">-1</span>,t=<span class="number">0</span>,x,inv=<span class="built_in">pow</span>(a,mod<span class="number">-2</span>),f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(s&amp;<span class="number">1</span>))s&gt;&gt;=<span class="number">1</span>,t++,f&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    t--,x=<span class="built_in">pow</span>(a,(s+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>),f&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t)&#123;</span><br><span class="line">        f&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span>((inv*x%mod*x%mod),f)!=<span class="number">1</span>)x=x*<span class="built_in">pow</span>(b,s)%mod;</span><br><span class="line">        t--,s&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(x,mod-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((a+b)&amp;<span class="number">1</span>) b+=mod;<span class="comment">//校正，在计算x,y的过程中就可以看出来</span></span><br><span class="line">    <span class="keyword">if</span>(b&lt;a) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ll x=(a+b)/<span class="number">2</span>,y=(b-a)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;=mod) b-=mod;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">    <span class="keyword">if</span>((x+y)%mod==b &amp;&amp; x*y%mod==c &amp;&amp; x&lt;mod &amp;&amp; y&lt;mod)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,x,y);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;b,&amp;c);</span><br><span class="line">        ll x=((b*b<span class="number">-4</span>*c)%mod+mod)%mod;</span><br><span class="line">        <span class="keyword">if</span>(qp(x,(mod<span class="number">-1</span>)/<span class="number">2</span>)==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll a=Quadratic_residue(x);<span class="comment">//计算出来的值有两个a,p-a(两者结果相等)</span></span><br><span class="line">            <span class="keyword">if</span>(check(a,b,c)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(check(mod-a,b,c)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/889/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接（暂未开放）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个数 $p=1e9+7$ ,以及两个式子$(x+y)\space mod \space p=b$,$(x*y)\space mod \space p=c$,给你 $b,c$ 的值$(0 \leq b,c &amp;lt; p)$，求出满足条件的$x,y$ 的值$(0\leq x \leq y &amp;lt; p)$，如果不存在，则输出 “-1 -1”。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数论" scheme="https://boctorio.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="二次剩余" scheme="https://boctorio.github.io/categories/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    
    
  </entry>
  
  <entry>
    <title>网络流</title>
    <link href="https://boctorio.github.io/2019/08/14/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    <id>https://boctorio.github.io/2019/08/14/网络流/</id>
    <published>2019-08-14T00:34:46.000Z</published>
    <updated>2019-08-14T02:36:48.819Z</updated>
    
    <content type="html"><![CDATA[<p>网络流是一种类比于水流，找出源点到汇点最大流量的一类问题。</p><a id="more"></a><p>先来看一个经典的网络流问题(<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1532" target="_blank" rel="noopener">HDU1532</a>)：</p><blockquote><p>每当约翰的田里下雨，贝西最喜欢的三叶草地里就会形成一个池塘。这意味着三叶草被水覆盖了一段时间，需要很长时间才能重新生长。因此，农夫约翰建了一套排水沟，这样贝西的苜蓿地就不会被水覆盖了。相反，水就会被排到附近的小溪。作为一名一流的工程师，农夫约翰还在每条水沟的开头安装了调节器，这样他就能控制水流进水沟的速度。农夫约翰不仅知道每分钟每条沟渠能输送多少加仑的水，还知道沟渠的精确布局，这些沟渠从池塘里流出，相互流入，形成一个潜在的复杂网络。根据所有这些信息，确定水从池塘中进入小溪的最大速度。对于任何给定的沟渠，水只朝一个方向流动，但可能有一种方式可以让水在一个圆圈中流动。<br>多组输入。对于每种情况，第一行包含两个空格分隔的整数，$N (0 \leq N \leq 200)$和$M (2 \leq M \leq 200)$。N是农民约翰挖的沟的数目。$M$是这些沟渠的交叉点个数。节点1是池塘。节点$M$是汇点。下面$N$行中的每一行都包含三个整数，$Si$、$Ei$和$Ci$。$Si$和$Ei$ $(1 \leq Si, Ei \leq M)$表示该沟渠流经的两个节点。水将通过这条沟从$Si$流到$Ei$。$Ci (0 \leq Ci \leq 10^7)$是水流通过沟渠的最大速度。<br>对于每组样例，输出一个整数，即从池塘中排空水的最大速度。<br>样例输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 5 4</span><br><span class="line">&gt; 1 2 40</span><br><span class="line">&gt; 1 4 20</span><br><span class="line">&gt; 2 4 20</span><br><span class="line">&gt; 2 3 30</span><br><span class="line">&gt; 3 4 10</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>样例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 50</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>对于网络流问题，本文使用 $Dinic$ 算法来讲解。</p><h3 id="Dinic算法"><a href="#Dinic算法" class="headerlink" title="Dinic算法"></a>Dinic算法</h3><p>Dinic算法的大致步骤为：</p><blockquote><ol><li>对于一个已经建好边的图，我们需要对每一条边都取反建一条反边，其流量为0。</li><li>对当前图跑一边BFS，确定每个可达点（流量不为0）的层次（即距离源点的远近关系），如果到达不了汇点，则跳转至4。此图一般叫做层次图。</li><li>对已确定关系的图跑一次DFS，找出一条从源点到汇点的水流，若找到，继续执行3，否则，跳转至2。</li><li>输出总和。</li><li>（弧优化）</li></ol></blockquote><p>每一步作用为：</p><h4 id="1-建反边"><a href="#1-建反边" class="headerlink" title="1. 建反边"></a>1. 建反边</h4><p>建立反向边的意义为为了保证贪心的过程是正确的，假如不建立反向边，贪心的策略可能会发生错误，可以认为反向边是为了容错。这一点可以参考白书$p210,p211$ 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll from,ll to,ll dis)</span></span>&#123;</span><br><span class="line">    G[cnt].to=to;</span><br><span class="line">    G[cnt].dis=dis;</span><br><span class="line">    G[cnt].nxt=head[from];</span><br><span class="line">    head[from]=cnt++;<span class="comment">//此处使用链式前向星存图</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-BFS"><a href="#2-BFS" class="headerlink" title="2. BFS"></a>2. BFS</h4><p>找出贪心的顺序，$Dinic$ 算法就是每次找出一条最短的增广路，因此需要$BFS$ 将每个点的层次计算出来，方便接下来进行计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));<span class="comment">//初始化均不可达</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        ll u=que.front();que.pop();</span><br><span class="line">        <span class="keyword">for</span>(ll i=head[u];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">            ll v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[v]==<span class="number">-1</span> &amp;&amp; G[i].dis&gt;<span class="number">0</span>)&#123;<span class="comment">//联通(有流量)且之前未到达</span></span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-DFS"><a href="#3-DFS" class="headerlink" title="3. DFS"></a>3. DFS</h4><p>对于每一次$BFS$ ,使用 $DFS$ 将现在的层次图中所有的增广路全部找出来（榨干）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll u,ll flow)</span></span>&#123;<span class="comment">//flow为u之前增广路上所有的边的最小值，因为一条路径的流量即为这条路径上的最小值</span></span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    ll x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=cur[u];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">        cur[u]=G[i].nxt<span class="comment">//此处为弧优化，接下来会讲</span></span><br><span class="line">        ll v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span> &amp;&amp; G[i].dis&gt;<span class="number">0</span>)&#123;<span class="comment">//向下增广</span></span><br><span class="line">            ll res = dfs(v,min(flow,G[i].dis));</span><br><span class="line">            flow -= res;</span><br><span class="line">            x += res;<span class="comment">//x为当前节点向下能够增广的最大流量</span></span><br><span class="line">            </span><br><span class="line">            G[i].dis   -= res;<span class="comment">//找到增光路后，路径上的每一条边都要减去flow,其反向边都要加上flow</span></span><br><span class="line">            G[i^<span class="number">1</span>].dis += res;<span class="comment">//cnt从0开始计数，每条边与其反向边只有最低为不相同，因此^1即为反向边</span></span><br><span class="line">            <span class="keyword">if</span>(flow == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//flow=0即为已经将这条路径前半部分全部使用完毕，不能够再继续使用了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!x) d[u]=<span class="number">-1</span>;<span class="comment">//如果当前点到达不了汇点，那么以后就不走这个点了</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-输出总和"><a href="#4-输出总和" class="headerlink" title="4. 输出总和"></a>4. 输出总和</h4><p>如题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll max_flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        bfs();<span class="comment">//层次图</span></span><br><span class="line">        <span class="keyword">if</span>(d[t]==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) cur[i]=head[i];<span class="comment">//弧优化</span></span><br><span class="line">        max_flow+=dfs(s,INF);<span class="comment">//计算流量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max_flow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-弧优化"><a href="#5-弧优化" class="headerlink" title="5. 弧优化"></a>5. 弧优化</h4><p>如果是单纯的$dfs$，会浪费许多时间在已经遍历过的边上，对于一些已经被访问过或已经被榨干的边，我们在$DFS$ 的过程中就不需要再去访问，因此我们用 $cur[\space]$ 数组去存储当前节点接下来应该访问的节点，不需要再花费时间在那些无用的节点上。</p><p>完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line">ll n,m,s,t,u,v,w;</span><br><span class="line">ll cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,dis,nxt;</span><br><span class="line">&#125;G[maxn];</span><br><span class="line">ll head[maxn],d[maxn],cur[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll from,ll to,ll dis)</span></span>&#123;</span><br><span class="line">    G[cnt].to=to;</span><br><span class="line">    G[cnt].dis=dis;</span><br><span class="line">    G[cnt].nxt=head[from];</span><br><span class="line">    head[from]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll u,ll flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    ll x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=cur[u];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">        cur[u]=G[i].nxt;</span><br><span class="line">        ll v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span> &amp;&amp; G[i].dis&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ll res = dfs(v,min(flow,G[i].dis));</span><br><span class="line">            flow -= res;</span><br><span class="line">            x += res;</span><br><span class="line">            G[i].dis   -= res;</span><br><span class="line">            G[i^<span class="number">1</span>].dis += res;</span><br><span class="line">            <span class="keyword">if</span>(flow == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!x) d[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        ll u=que.front();que.pop();</span><br><span class="line">        <span class="keyword">for</span>(ll i=head[u];i!=<span class="number">-1</span>;i=G[i].nxt)&#123;</span><br><span class="line">            ll v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[v]==<span class="number">-1</span> &amp;&amp; G[i].dis&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll max_flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="keyword">if</span>(d[t]==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        max_flow+=dfs(s,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max_flow);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;m,&amp;n))&#123;</span><br><span class="line">        s=<span class="number">1</span>,t=n;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dinic();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络流是一种类比于水流，找出源点到汇点最大流量的一类问题。&lt;/p&gt;
    
    </summary>
    
      <category term="网络流" scheme="https://boctorio.github.io/categories/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
  </entry>
  
  <entry>
    <title>All-one Matrices--2019牛客暑期多校训练营(第八场)-A题</title>
    <link href="https://boctorio.github.io/2019/08/13/All-one-Matrices-2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AB%E5%9C%BA-A%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/08/13/All-one-Matrices-2019牛客暑期多校训练营-第八场-A题/</id>
    <published>2019-08-13T03:26:11.000Z</published>
    <updated>2019-08-13T03:49:57.803Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/888/A" target="_blank" rel="noopener">题目链接（暂未开放）</a></p><p>题目大意为：</p><blockquote><p>给你一个 $n*m$ 的01矩阵，让你找出数量最多的全1矩阵，使得他们不被包含在其他任何全1矩阵中。<br><a id="more"></a></p><p>样例输入：<br>3 4<br>0111<br>1110<br>0101<br>样例输出：<br>5<br>说明：</p><p>The 5 matrices are $ (1,2)−(1,4)$,  $(1,2)−(2,3)$,  $(1,2)−(3,2)$,  $(2,1)−(2,3)$, $ (3,4)−(3,4)$.</p></blockquote><p>这个题下去写了好久才写出来，坑比较多，处理起来比较复杂。</p><p>​        题目意思就是求所有的不能再扩充的01子矩阵，首先我们需要知道，对于一个全1子矩阵，如果它不能扩充，那么它的上下左右相邻的点必定不是全1，即有0，这个我们可以用前缀和来处理，接下来就是如何求这样一个全1矩阵。<br>​        根据之前学过的知识，求一个全1矩阵，先求每个点向下的连续的1的长度，样例的连续的1的矩阵为：</p><blockquote><p>0 1 1 1<br>1 2 2 0<br>0 3 0 1</p></blockquote><p>​        构造好以后，我们就对每一行利用单调栈进行计算，假如有元素出栈，那么就说明这个元素所对应的全1矩阵已经找到，<strong>不能再扩充了</strong>，那么我们一定知道它向下，向左，向右一定不能扩充，因此我们只需要它能不能向上扩充即可，此时就用到了前缀和。<br>​        当遍历完一行之后，单调栈内可能还有一些元素没有被处理，那么这些元素所对应的矩阵右边界一定为左右边这一列，因此也按照之前的方法进行判断即可。</p><p>​        需要注意的是，每当出栈一个元素，这个元素的左边界就会改变，因此我们还需要一个数组来记录当前元素的左边界的位置。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> up[maxn][maxn];<span class="comment">//连续1的长度</span></span><br><span class="line"><span class="keyword">int</span> pre[maxn][maxn];<span class="comment">//前缀和</span></span><br><span class="line"><span class="keyword">int</span> pos[maxn];<span class="comment">//当前行每个元素的左边界</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(up,<span class="number">0</span>,<span class="keyword">sizeof</span>(up));</span><br><span class="line">        <span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                up[i][j]=up[i+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">'1'</span>) up[i][j]++;</span><br><span class="line">                <span class="keyword">else</span> up[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                pre[i][j]=pre[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">'1'</span>) pre[i][j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                pos[j]=j;</span><br><span class="line">                <span class="keyword">while</span>(!st.empty() &amp;&amp; up[i][st.top()]&gt;=up[i][j])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(up[i][st.top()]!=up[i][j])&#123;<span class="comment">//相同的长度可以不做考虑，直接跳过，因为它必定包含在当前这个更大的矩阵中</span></span><br><span class="line">                        <span class="keyword">if</span>(pre[i<span class="number">-1</span>][j<span class="number">-1</span>]-pre[i<span class="number">-1</span>][pos[st.top()]<span class="number">-1</span>]!=j-pos[st.top()]) ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pos[j]=pos[st.top()];</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                st.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty())&#123;<span class="comment">//剩下元素右边界均为m</span></span><br><span class="line">                <span class="keyword">if</span>(up[i][st.top()]!=<span class="number">0</span> &amp;&amp; pre[i<span class="number">-1</span>][m]-pre[i<span class="number">-1</span>][pos[st.top()]<span class="number">-1</span>]!=m-pos[st.top()]+<span class="number">1</span>) ans++;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/888/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接（暂未开放）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个 $n*m$ 的01矩阵，让你找出数量最多的全1矩阵，使得他们不被包含在其他任何全1矩阵中。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前缀和" scheme="https://boctorio.github.io/categories/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="单调栈" scheme="https://boctorio.github.io/categories/%E5%89%8D%E7%BC%80%E5%92%8C/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>最大子段和</title>
    <link href="https://boctorio.github.io/2019/08/08/%E6%9C%80%E5%A4%A7%E5%8C%BA%E9%97%B4%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <id>https://boctorio.github.io/2019/08/08/最大区间子段和/</id>
    <published>2019-08-08T13:09:03.000Z</published>
    <updated>2019-08-09T00:32:12.083Z</updated>
    
    <content type="html"><![CDATA[<p>最大字段和问题为：</p><blockquote><p>给你一个数组，求这个数组中连续子区间和的最大值。</p></blockquote><a id="more"></a><h3 id="最大字段和"><a href="#最大字段和" class="headerlink" title="最大字段和"></a>最大字段和</h3><p>前置知识：<strong>线段树</strong>。</p><p>我们将数组中所有的元素存入线段树，然后利用线段树求解此问题。<br>我们需要开四个数组：$pre[\space],nxt[\space],sum[\space],val[\space]$，其分别对应于：</p><blockquote><p>$pre[\space]$:最大前缀<br>$nxt[\space]$:最大后缀<br>$sum[\space]$:区间和<br>$val[\space]$:区间最大字段和</p></blockquote><p>对于每个数组，其更新为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pre[i]=max(pre[i*<span class="number">2</span>+<span class="number">1</span>],sum[i*<span class="number">2</span>+<span class="number">1</span>]+pre[i*<span class="number">2</span>+<span class="number">2</span>]);</span><br><span class="line">nxt[i]=max(nxt[i*<span class="number">2</span>+<span class="number">2</span>],sum[n*<span class="number">2</span>+<span class="number">2</span>]+nxt[i*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">sum[i]=sum[i*<span class="number">2</span>+<span class="number">1</span>]+sum[i*<span class="number">2</span>+<span class="number">2</span>];</span><br><span class="line">val[i]=max(max(val[i*<span class="number">2</span>+<span class="number">1</span>],val[i*<span class="number">2</span>+<span class="number">2</span>]),nxt[i*<span class="number">2</span>+<span class="number">1</span>]+pre[i*<span class="number">2</span>+<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>其更新原理为：</p><h4 id="pre"><a href="#pre" class="headerlink" title="pre[]"></a>pre[]</h4><p>对于下面这个区间：</p><p><img src="/2019/08/08/最大区间子段和/1.png" alt=""></p><p>他的最大前缀可能为</p><p><img src="/2019/08/08/最大区间子段和/2.png" alt=""></p><p>其对应的子区间状态为(pre[i]=pre[i*2+1])：</p><p><img src="/2019/08/08/最大区间子段和/3.png" alt=""></p><p>而对于另一种前缀:</p><p><img src="/2019/08/08/最大区间子段和/4.png" alt=""></p><p>其对应子区间状态为(pre[i]=sum[i*2+1]+pre[i*2+2])：</p><p><img src="/2019/08/08/最大区间子段和/5.png" alt=""></p><h4 id="nxt"><a href="#nxt" class="headerlink" title="nxt[]"></a>nxt[]</h4><p>同上,略。</p><h4 id="sum"><a href="#sum" class="headerlink" title="sum[]"></a>sum[]</h4><p>区间求和，线段树基本操作。</p><h4 id="val"><a href="#val" class="headerlink" title="val[]"></a>val[]</h4><p>对于一个最大字段和，其有可能是只在左半边或右半边，也有可能左右兼有。即可得。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最大字段和问题为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个数组，求这个数组中连续子区间和的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="区间子段和" scheme="https://boctorio.github.io/categories/%E5%8C%BA%E9%97%B4%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Snowy Smile--2019杭电暑期多校训练营(第六场)-E题</title>
    <link href="https://boctorio.github.io/2019/08/08/Snowy-Smile-2019%E6%9D%AD%E7%94%B5%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AD%E5%9C%BA-E%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/08/08/Snowy-Smile-2019杭电暑期多校训练营-第六场-E题/</id>
    <published>2019-08-08T12:52:49.000Z</published>
    <updated>2019-08-08T13:21:58.391Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638" target="_blank" rel="noopener">题目传送门</a></p><p>题目大意为：</p><blockquote><p>给你 $n(1 \leq n \leq 2000)$个宝箱的坐标，每个宝箱都有一个坐标$(x_i,y_i)(-1e9 \leq x_i,y_i \leq 1e9) $ 价值 $w_i(-1e9 \leq w_i \leq 1e9)$，让你构造一个矩形，使得这个矩形中包含的值总和最大，并输出这个值。</p></blockquote><a id="more"></a><p>这是一个非常好的题目，我们先把点进行离散化，然后就能够将坐标范围缩小到2000，然后就可以利用线段树动态的来求<a href="http://localhost:4000/2019/08/08/%E6%9C%80%E5%A4%A7%E5%8C%BA%E9%97%B4%E5%AD%90%E6%AE%B5%E5%92%8C/" target="_blank" rel="noopener">区间最大子段和</a>。</p><p>将坐标离散化后，开始枚举矩形的左右边界。对每一个左边界，我们依次枚举右边界,将处于左右边界之间的点根据 $y$ 值存入一维线段树，然后对当前状态在线段树上 $log$ 时间查询区间最大子段和（计算上下边界）即可。时间复杂度约为$O(n^2log(n))$</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">20000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll x,y,w;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line">ll t,q,n,m,N,a[maxn],b[maxn];</span><br><span class="line">ll pre[maxm],nxt[maxm],s[maxm],tree[maxm];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node i,node j)</span></span>&#123;<span class="keyword">return</span> i.x&lt;j.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123; N=<span class="number">1</span>; <span class="keyword">while</span>(N&lt;m) N*=<span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N*<span class="number">2</span>;i++) pre[i]=nxt[i]=s[i]=tree[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll k,ll x)</span></span>&#123;</span><br><span class="line">    k+=N<span class="number">-1</span>;</span><br><span class="line">    s[k]+=x;</span><br><span class="line">    <span class="keyword">if</span>(s[k]&gt;<span class="number">0</span>) pre[k]=nxt[k]=tree[k]=s[k];</span><br><span class="line">    <span class="keyword">else</span> pre[k]=nxt[k]=tree[k]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        k=(k<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        s[k]=s[k*<span class="number">2</span>+<span class="number">1</span>]+s[k*<span class="number">2</span>+<span class="number">2</span>];</span><br><span class="line">        pre[k]=max(pre[k*<span class="number">2</span>+<span class="number">1</span>],s[k*<span class="number">2</span>+<span class="number">1</span>]+pre[k*<span class="number">2</span>+<span class="number">2</span>]);</span><br><span class="line">        nxt[k]=max(nxt[k*<span class="number">2</span>+<span class="number">2</span>],s[k*<span class="number">2</span>+<span class="number">2</span>]+nxt[k*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">        tree[k]=max(max(tree[k*<span class="number">2</span>+<span class="number">1</span>],tree[k*<span class="number">2</span>+<span class="number">2</span>]),nxt[k*<span class="number">2</span>+<span class="number">1</span>]+pre[k*<span class="number">2</span>+<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    ll i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span> || p[i].x!=p[i<span class="number">-1</span>].x)&#123;</span><br><span class="line">            build();</span><br><span class="line">            <span class="keyword">for</span>(j=i;j&lt;=q;j=k)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&lt;=q &amp;&amp; p[j].x==p[k].x;k++) update(p[k].y,p[k].w);</span><br><span class="line">                ans=max(ans,tree[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;p[i].x,&amp;p[i].y,&amp;p[i].w);</span><br><span class="line">            a[i]=p[i].x;b[i]=p[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+q+<span class="number">1</span>);n=unique(a+<span class="number">1</span>,a+q+<span class="number">1</span>)-(a+<span class="number">1</span>);</span><br><span class="line">        sort(b+<span class="number">1</span>,b+q+<span class="number">1</span>);m=unique(b+<span class="number">1</span>,b+q+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            p[i].x=lower_bound(a+<span class="number">1</span>,a+n+<span class="number">1</span>,p[i].x)-a<span class="number">-1</span>;</span><br><span class="line">            p[i].y=lower_bound(b+<span class="number">1</span>,b+m+<span class="number">1</span>,p[i].y)-b<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p+<span class="number">1</span>,p+q+<span class="number">1</span>,cmp);</span><br><span class="line">        init();</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你 $n(1 \leq n \leq 2000)$个宝箱的坐标，每个宝箱都有一个坐标$(x_i,y_i)(-1e9 \leq x_i,y_i \leq 1e9) $ 价值 $w_i(-1e9 \leq w_i \leq 1e9)$，让你构造一个矩形，使得这个矩形中包含的值总和最大，并输出这个值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="线段树" scheme="https://boctorio.github.io/categories/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="最大子段和" scheme="https://boctorio.github.io/categories/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>康托展开和逆康托展开</title>
    <link href="https://boctorio.github.io/2019/08/05/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80%E5%92%8C%E9%80%86%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    <id>https://boctorio.github.io/2019/08/05/康托展开和逆康托展开/</id>
    <published>2019-08-05T13:15:07.000Z</published>
    <updated>2019-08-09T00:16:11.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>康托展开是一个全排列到一个自然数的双射，常用于构建哈希表时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。（源于百度百科）</p></blockquote><a id="more"></a><h3 id="康托展开"><a href="#康托展开" class="headerlink" title="康托展开"></a>康托展开</h3><p>康托展开可以在非常短的时间内计算出某个全排列在所有长度相同的全排列中的顺序，其基本思想为：</p><blockquote><p>从左至右计算出当前位所对应的贡献，将每一位的贡献累加即可计算出这个全排列的顺序，其贡献为 $a_i * (n-i)!+1(1 \leq i \leq n)$ ,其中 $a_i $ 表示<strong>第 $i$ 位后面有多少位的值小于当前位的值</strong>。</p></blockquote><p>举例说明：$5, 3, 2, 4, 1$ ，其顺序为：<br>$$<br>4*(5-1)!+2*(5-2)!+1*(5-3)!+1*(5-4)!+0*(5-5)!+1=112<br>$$<br>所以其是第$112$个全排列，至于最后为什么加$1$，因为对于全排列 $1,2,3,4,5$ ，计算出来的值为：<br>$$<br>0*(5-1)!+0*(5-2)!+0*(5-3)!+0*(5-4)!+0*(5-5)!=0<br>$$<br>其对应的顺序为$0$，所以需要$+1$来修正这个顺序。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cantor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll sum=<span class="number">1</span>,fac=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        fac*=(n-i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j]) sum+=fac;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为什么这样算，略……（毕竟证明确实不算难）</p><h3 id="逆康托展开"><a href="#逆康托展开" class="headerlink" title="逆康托展开"></a>逆康托展开</h3><p>逆康托展开与康托展开相对应，求第 $i$ 个全排列的值。</p><p>其求解过程与康托展开类似，也是从左至右一位一位进行求解，但过程相对康托展开有些繁琐：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inverse_cantor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll fac=<span class="number">1</span>,num;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) fac*=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        num=k/fac;</span><br><span class="line">        k%=fac;</span><br><span class="line">        <span class="keyword">if</span>(n-i) fac/=(n-i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">0</span> &amp;&amp; !vis[j])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,j);</span><br><span class="line">                vis[j]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j]) num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;康托展开是一个全排列到一个自然数的双射，常用于构建哈希表时的空间压缩。 康托展开的实质是计算当前排列在所有由小到大全排列中的顺序，因此是可逆的。（源于百度百科）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数论" scheme="https://boctorio.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>subsequence 2--2019牛客暑期多校训练营(第五场)-H题</title>
    <link href="https://boctorio.github.io/2019/08/05/subsequence-2-2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%BA%94%E5%9C%BA-H%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/08/05/subsequence-2-2019牛客暑期多校训练营-第五场-H题/</id>
    <published>2019-08-05T11:33:34.000Z</published>
    <updated>2019-08-09T00:10:58.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/885/H" target="_blank" rel="noopener">题目链接（暂未开放）</a></p><p>题目大意为：</p><blockquote><p>给你一个长度为 $n$ 的字符串，字符串中最多只包含有小写字母的前 $m$ 位。给你 $n,m$ 的值，接下来给你 $m*(m-1)/2$ 组字母，每组两个字母，从字符串中按顺序挑出这两种字符串，问能否还原本来的字符串。如果不能，则输出$-1$，否则输出原本的字符串。<a id="more"></a></p><p>样例输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">3</span> <span class="number">3</span></span><br><span class="line">&gt; ab <span class="number">2</span></span><br><span class="line">&gt; ab</span><br><span class="line">&gt; bc <span class="number">2</span></span><br><span class="line">&gt; bc</span><br><span class="line">&gt; ca <span class="number">2</span></span><br><span class="line">&gt; ac</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>样例输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; abc</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>这是一个非常有意思的题目，</p><p>如果我们把每个字母都当成一个节点，按照输入的顺序将其进行连有向边，那么这个字符串就能够被表示成一个有向图的形式，接下来我们就能够按照拓扑排序的方法对其进行判断。</p><p>我们把每种出现的字母都进行标号，然后开一个数组对每个标号进行连线处理，由于是有向图，只需要对输入的相邻的两个字母进行连边即可.</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,len;</span><br><span class="line"><span class="keyword">char</span> tp[maxn],str[maxn];</span><br><span class="line"><span class="keyword">int</span> rudu[maxn];<span class="comment">//拓扑排序用</span></span><br><span class="line"><span class="keyword">int</span> pos[maxn];<span class="comment">//每种字符第一次出现的位置</span></span><br><span class="line"><span class="keyword">int</span> num[maxn];<span class="comment">//每种字符的数量</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn];<span class="comment">//用来保存当前字符所对应的标号</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[i]&lt;=x &amp;&amp; x&lt;pos[i]+num[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,i+<span class="string">'a'</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pos,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m*(m<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>,tp,&amp;len);</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">        <span class="keyword">if</span>(pos[tp[<span class="number">0</span>]-<span class="string">'a'</span>]==<span class="number">-1</span>)&#123;<span class="comment">//判断是否出现过,下同</span></span><br><span class="line">            pos[tp[<span class="number">0</span>]-<span class="string">'a'</span>]=cnt;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="keyword">if</span>(str[i]==tp[<span class="number">0</span>]) num[tp[<span class="number">0</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">            cnt+=num[tp[<span class="number">0</span>]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos[tp[<span class="number">1</span>]-<span class="string">'a'</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">            pos[tp[<span class="number">1</span>]-<span class="string">'a'</span>]=cnt;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="keyword">if</span>(str[i]==tp[<span class="number">1</span>]) num[tp[<span class="number">1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">            cnt+=num[tp[<span class="number">1</span>]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        sum[str[<span class="number">0</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;<span class="comment">//连边</span></span><br><span class="line">            <span class="keyword">int</span> x=str[i<span class="number">-1</span>]-<span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">int</span> y=str[i]-<span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">            rudu[pos[y]+sum[y]]++;</span><br><span class="line">            <span class="comment">// printf("%d\n",pos[y]+sum[y]);</span></span><br><span class="line">            vec[pos[x]+sum[x]<span class="number">-1</span>].push_back(pos[y]+sum[y]);</span><br><span class="line">            sum[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rudu[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            que.push(i);</span><br><span class="line">            flag++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag!=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x=que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            ans[q++]=x;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">                rudu[vec[x][i]]--;</span><br><span class="line">                <span class="keyword">if</span>(rudu[vec[x][i]]==<span class="number">0</span>) que.push(vec[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag || q!=n) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">                out(ans[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/885/H&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接（暂未开放）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个长度为 $n$ 的字符串，字符串中最多只包含有小写字母的前 $m$ 位。给你 $n,m$ 的值，接下来给你 $m*(m-1)/2$ 组字母，每组两个字母，从字符串中按顺序挑出这两种字符串，问能否还原本来的字符串。如果不能，则输出$-1$，否则输出原本的字符串。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="拓扑排序" scheme="https://boctorio.github.io/categories/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>十进制下的矩阵快速幂优化</title>
    <link href="https://boctorio.github.io/2019/08/01/%E5%8D%81%E8%BF%9B%E5%88%B6%E4%B8%8B%E7%9A%84%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E4%BC%98%E5%8C%96/"/>
    <id>https://boctorio.github.io/2019/08/01/十进制下的矩阵快速幂优化/</id>
    <published>2019-08-01T13:12:22.000Z</published>
    <updated>2019-08-09T00:17:02.707Z</updated>
    
    <content type="html"><![CDATA[<p>矩阵快速幂是一种用来求解递推式问题的高效算法，能在 $log$ 的时间内求解递推式的某一项。但是当 $n$ 变得非常大时（远远超过了 $long long$ 的表示范围，比如$10^{10^{5}}$），单纯的矩阵快速幂就会浪费大量的时间在处理字符串上，这是就需要使用十进制的优化了。</p><a id="more"></a><p><a href="https://ac.nowcoder.com/acm/contest/885/B" target="_blank" rel="noopener">2019牛客多校第五场B题（暂未开放）</a></p><p>题目大意为：</p><blockquote><p>给你一个递推式的第零项 $x_0$ 和第一项 $x_1$ 以及通项公式 $x_i=a*x_{i-1}+b*x_{i-2}(i&gt;1)$ , 求该数列第 $n(1\leq n \leq 10^{10^6})$ 项模 $mod$ 的值。</p></blockquote><p>假如使用二进制模拟，那么时间复杂度为 $log(n)*len(n)$ ，$len$ 为 $n$ 的长度，那么超时是在所难免的，此时就需要用一下(奇)技(淫)巧了。</p><p>十进制的表示下，1234可以分解成$1*1000+2*100+3*10+4$ ，矩阵快速幂的优化也基于此，我们计算出系数矩阵的第 $10^x$ 次方项，然后计算出当前十进制下从低到高第 $x$ 位所对应的值，就可以计算出当前为所对应的系数矩阵的值，然后再用二进制下求解矩阵快速幂的方法求出系数矩阵第 $10^{x+1}$ 项的值，就可以继续依次求解了。</p><p>题目代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll x0,x1,a,b,mod;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">1000000</span>+<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">node <span class="keyword">operator</span> *(node x,node y)&#123;</span><br><span class="line">    node res;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">            res.a[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)&#123;</span><br><span class="line">                res.a[i][j]=(res.a[i][j]+x.a[i][k]*y.a[k][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">qp</span><span class="params">(node a,ll b)</span></span>&#123;</span><br><span class="line">    node res;</span><br><span class="line">    res.a[<span class="number">0</span>][<span class="number">0</span>]=res.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    res.a[<span class="number">0</span>][<span class="number">1</span>]=res.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld %s %lld"</span>,&amp;x0,&amp;x1,&amp;a,&amp;b,&amp;n,&amp;mod);</span><br><span class="line">    node x;</span><br><span class="line">    x.a[<span class="number">0</span>][<span class="number">0</span>]=a;x.a[<span class="number">0</span>][<span class="number">1</span>]=b;</span><br><span class="line">    x.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;x.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    node ans;</span><br><span class="line">    ans.a[<span class="number">0</span>][<span class="number">0</span>]=ans.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ans.a[<span class="number">1</span>][<span class="number">0</span>]=ans.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    ll len=<span class="built_in">strlen</span>(n);</span><br><span class="line">    <span class="comment">//由于是n-1次方，所以需要减1</span></span><br><span class="line">    <span class="keyword">for</span>(ll i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n[i]!=<span class="string">'0'</span>)&#123;</span><br><span class="line">            n[i]--;</span><br><span class="line">            <span class="keyword">for</span>(ll j=i+<span class="number">1</span>;j&lt;len;j++) n[j]=<span class="string">'9'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        ans=ans*qp(x,n[i]-<span class="string">'0'</span>);</span><br><span class="line">        x=qp(x,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans.a[<span class="number">0</span>][<span class="number">0</span>]*x1+ans.a[<span class="number">0</span>][<span class="number">1</span>]*x0)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;矩阵快速幂是一种用来求解递推式问题的高效算法，能在 $log$ 的时间内求解递推式的某一项。但是当 $n$ 变得非常大时（远远超过了 $long long$ 的表示范围，比如$10^{10^{5}}$），单纯的矩阵快速幂就会浪费大量的时间在处理字符串上，这是就需要使用十进制的优化了。&lt;/p&gt;
    
    </summary>
    
      <category term="矩阵快速幂" scheme="https://boctorio.github.io/categories/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
    
  </entry>
  
  <entry>
    <title>线性基</title>
    <link href="https://boctorio.github.io/2019/07/23/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    <id>https://boctorio.github.io/2019/07/23/线性基/</id>
    <published>2019-07-23T00:42:22.000Z</published>
    <updated>2019-08-09T00:19:06.835Z</updated>
    
    <content type="html"><![CDATA[<p>线性基是用来求解数组子集最大异或和的一种方法。其思想与线性代数中的最大线性无关组相似。</p><a id="more"></a><h4 id="线性基的性质"><a href="#线性基的性质" class="headerlink" title="线性基的性质"></a>线性基的性质</h4><p>线性基有以下几种性质：</p><blockquote><ol><li>数组中的所有元素都能够用线性基中的元素相互异或计算出来</li><li>线性基中不存在异或值为0的子集</li><li>满足性质1的前提下，线性基中的元素个数是最少的。</li><li>线性基中每个元素二进制位数均不相同</li></ol></blockquote><h4 id="线性基的计算"><a href="#线性基的计算" class="headerlink" title="线性基的计算"></a>线性基的计算</h4><p>对于当前所求出来的线性基，我们在插入一个新的元素时（即使得其表示范围多一个数 $x$），要保证插入的元素与其他元素异或不为零。</p><p>根据性质4，我们能够通过位运算对插入的元素进行异或计算：<br>$$<br>x = p_1  \bigoplus  p_2 \bigoplus … \bigoplus p_i \bigoplus p_x<br>$$<br>$p_i$ 为线性基中的某个基，则：<br>$$<br>p_x = p_1  \bigoplus  p_2 \bigoplus … \bigoplus p_i \bigoplus x<br>$$<br>根据性质4，我们求解的线性基中不能包含二进制位数相同的数，因此我们把x按照最高位向最低位异或的方式进行计算，假如当前x的二进制最高位所对应的基存在，则x异或这个基（此时x的值会改变），这样能够保证x的二进制位数至少能够减少1位，然后继续进行计算，计算终点有两种结果：</p><blockquote><ol><li>x二进制最高位对应的基不存在，则把x插入线性基，运算结束</li><li>x值变为0，说明当前线性基能够表示最开始的x，则直接结束。</li></ol></blockquote><p>这样就能够求出来 $p_x$ 的值，即线性基需要插入的元素。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!f[i])&#123;</span><br><span class="line">f[i]=x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">x^=f[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线性基是用来求解数组子集最大异或和的一种方法。其思想与线性代数中的最大线性无关组相似。&lt;/p&gt;
    
    </summary>
    
      <category term="线性基" scheme="https://boctorio.github.io/categories/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Operation--2019杭电多校训练第一场-B题</title>
    <link href="https://boctorio.github.io/2019/07/23/Operation-2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E7%AC%AC%E4%B8%80%E5%9C%BA-B%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/07/23/Operation-2019杭电多校训练第一场-B题/</id>
    <published>2019-07-23T00:41:46.000Z</published>
    <updated>2019-08-09T00:09:46.120Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579" target="_blank" rel="noopener">题目传送门</a></p><p>题目大意为：</p><blockquote><p>给你一个1~n的数组,然后有m个操作，0操作为在数组最后添加一个新元素，1操作为查询区间 $[l,r]$ 子集异或最大值。</p><p>其中输入经过加密操作，需要经过解密才能获取正确数据（强制在线）</p></blockquote><a id="more"></a><p>看到了子集异或值就应该知道是使用<a href="http://localhost:4000/2019/07/23/%E7%BA%BF%E6%80%A7%E5%9F%BA/" target="_blank" rel="noopener">线性基</a>的知识。</p><p>如果按照暴力的解法一定会超时，但是我们可以通过一定贪心策略找到当前的最优解。</p><p>（下面就需要对线性基有清晰的认识了）</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>对于区间$[1,x]$$(1 \leq x \leq n)$，我们可以通过继承的方式找到每个区间的线性基：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j];<span class="comment">//将上一个区间[1,i-1]的线性基继承到[1,i]</span></span><br><span class="line">pos[i][j]=pos[i<span class="number">-1</span>][j];<span class="comment">//pos数组用来保存 计算出线性基第j个基的元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承之后我们就可以求解当前区间的线性基了。</p><p>在求解时，我们需要用贪心的策略对线性基进行更新：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!f[i][j])&#123;</span><br><span class="line">f[i][j]=x;</span><br><span class="line">pos[i][j]=k;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//这一步是贪心策略，将计算出基的元素尽量的靠右</span></span><br><span class="line"><span class="comment">//由线性基的性质可知，在替换掉当前元素后，线性基的性质和表示范围不会发生改变。</span></span><br><span class="line"><span class="keyword">if</span>(k&gt;pos[i][j])&#123;</span><br><span class="line">swap(k,pos);</span><br><span class="line">swap(x,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">x^=f[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询区间最大值"><a href="#查询区间最大值" class="headerlink" title="查询区间最大值"></a>查询区间最大值</h4><p>假设需要计算的区间为 $[l,r]$ （已经过转换），那么我们接下来就要根据<strong>利用线性基求子集最大值</strong>的方法来进行求解了。</p><p>对于 $f[i][j]$ ,我们可以知道这个基的有效范围为 $[1,pos[i][j]]$ ,当 $l&gt;pos[i][j]时$ 这个基就已经没有了计算的意义。</p><p>所以使用 $S=\lbrace f[r][j]~| l \leq pos[r][j] \rbrace$ 就能够用来表示区间 $[l,r]$ 的所有子集异或和：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>((ans^f[r][j])&gt;ans &amp;&amp; pos[r][j]&gt;=l)</span><br><span class="line">ans^=f[r][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能够简便的计算出区间 $[l,r]$ 子集的异或和最大值。</p><p>完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,l,r,op,res;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">32</span>],pos[maxn][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">pos[i][j]=pos[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!f[i][j])&#123;</span><br><span class="line">f[i][j]=x;</span><br><span class="line">pos[i][j]=k;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;pos[i][j])&#123;</span><br><span class="line">swap(k,pos[i][j]);</span><br><span class="line">swap(x,f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">x^=f[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">add(i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line"><span class="keyword">if</span>(op)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[++n]);</span><br><span class="line">a[n]=a[n]^res;</span><br><span class="line">add(n,a[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;l,&amp;r);</span><br><span class="line">l=(l^res)%n+<span class="number">1</span>;r=(r^res)%n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) swap(l,r);</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>((res^f[r][j])&gt;res &amp;&amp; pos[r][j]&gt;=l)</span><br><span class="line">res^=f[r][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">f[i][j]=pos[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6579&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个1~n的数组,然后有m个操作，0操作为在数组最后添加一个新元素，1操作为查询区间 $[l,r]$ 子集异或最大值。&lt;/p&gt;
&lt;p&gt;其中输入经过加密操作，需要经过解密才能获取正确数据（强制在线）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="线性基" scheme="https://boctorio.github.io/categories/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>换根dp</title>
    <link href="https://boctorio.github.io/2019/07/22/%E6%8D%A2%E6%A0%B9dp/"/>
    <id>https://boctorio.github.io/2019/07/22/换根dp/</id>
    <published>2019-07-22T00:53:45.000Z</published>
    <updated>2019-08-27T02:40:17.693Z</updated>
    
    <content type="html"><![CDATA[<p>换根dp是一种用来求解树上各点到其他点的距离之和的算法。</p><a id="more"></a><p>在进行换根dp时，需要先利用 $dfs$ 计算出根节点到其他节点的距离之和，以及以每个节点为根节点的子树的节点数量。然后再对其进行换根dp。</p><h4 id="Part1-计算根节点到其他节点距离之和"><a href="#Part1-计算根节点到其他节点距离之和" class="headerlink" title="Part1:计算根节点到其他节点距离之和"></a>Part1:计算根节点到其他节点距离之和</h4><p>我们在求解时利用递归的思想进行求解：</p><blockquote><p>假设 $a$ 为根节点，$b$ 为直系子节点，那么对于 $b$ 所在子树对 $a$ 的贡献为 $dis[b]+point[b]$  ,其中 $dis[b]$为 $b$到以b为根节点的子树中所有点的距离之和。$point[b]$为以 $b$ 为根节点的子树中的点的个数，其实很好理解，就相当于以 $b$ 为根节点中的所有路径长度全部 $+1$，然后就到达了 $a$ 节点。</p></blockquote><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dis[maxn];<span class="comment">//第一次dfs每个节点到其子节点距离之和 </span></span><br><span class="line"><span class="keyword">int</span> point[maxn];<span class="comment">//每个节点下子节点个数（包括这个节点本身） </span></span><br><span class="line"><span class="keyword">int</span> dp[maxn];<span class="comment">//最终结果  </span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> y=vec[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">dfs(y);</span><br><span class="line">sum+=point[y];</span><br><span class="line">dis[x]+=dis[y]+point[y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">point[x]=sum+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Part2-进行换根dp"><a href="#Part2-进行换根dp" class="headerlink" title="Part2:进行换根dp"></a>Part2:进行换根dp</h4><p>准备工作做完之后，我们就可以开始换根dp，换根dp的思想就是<strong>把与根相连的节点通过一定的操作将其变为根</strong>。</p><p>依然利用上述节点 $a,b$ ,将根节点从 $a$ 移动到 $b$ ，$dp[b]$ 的值为：$dp[a]+-point[b]+(n-point[b])$，其中：</p><blockquote><p>$-point[b]$ 表示从 $b$ 引申出来的 $point[b]$ 条路径长度全部 $- 1$.</p><p>$n-point[b]$ 表示从 $a$ 引申出来的不包含 $b$ 的其他路径长度全部 $+1$</p></blockquote><p>状态转移方程计算出来之后就可以利用 $dfs$ 进行换根dp了。</p><p>代码如下（初始状态下$dp[a]=dis[a]$）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> y=vec[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">dp[y]=dp[x]-point[y]+n-point[y];</span><br><span class="line">Dp(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能计算出所有的点到其他节点的距离之和了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换根dp是一种用来求解树上各点到其他点的距离之和的算法。&lt;/p&gt;
    
    </summary>
    
      <category term="换根dp" scheme="https://boctorio.github.io/categories/%E6%8D%A2%E6%A0%B9dp/"/>
    
    
  </entry>
  
  <entry>
    <title>Cotree--2019CCPC-江西省赛-A题</title>
    <link href="https://boctorio.github.io/2019/07/22/Cotree-2019CCPC-%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9B-A%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/07/22/Cotree-2019CCPC-江西省赛-A题/</id>
    <published>2019-07-21T23:56:44.000Z</published>
    <updated>2019-08-09T00:06:18.461Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6567" target="_blank" rel="noopener">题目链接（杭电重现赛）</a></p><p>题目大意：</p><blockquote><p>给你两棵树，在这两棵树上分别找一个点，将其连接，使得$\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}dis(i,j)$ 最小，其中$dis(i,j)$表示从节点 $i$ 到节点 $j$ 的边数。</p></blockquote><a id="more"></a><h4 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h4><p>首先我们需要判断<strong>我们找的这两个点应该是哪个点</strong>，对于两棵树，他们的 $dis$ 和是固定的,因此我们需要讨论将两个点连接起来所增加的花费。</p><blockquote><p>假设需要连接的两棵树$A,B$,两棵树上进行连接的点为 $u,v$ ，</p><p>点 $u,v$ 到其所在子树其他点的距离之和为$Dis_u,Dis_v$ ，$A,B$ 上点的个数为 $P_A,P_B$,</p></blockquote><p>那么将其连接后增加的 $dis$ 值为：<br>$$<br>Dis_u*P_B+Dis_v*P_A+P_A*P_B<br>$$<br>很容易理解：</p><blockquote><p>对于树 $A$ 上的任意一个点 $w$ ，我们需要将其和 $B$ 上的所有点进行一次连接，等同于需要将$dis(w,u)$ 重复计算 $P_B$ 次，其他点同理，因此 $A$ 树上增加的 $dis$ 值为 $Dis_u*P_B$ ，B树同理。</p><p>而对于刚建立的通道 $dis(u,v)=1$  被使用了 $P_A*P_B$ 因此总的增加量即为上式。</p></blockquote><p>$P_A,P_B$为定值，所以我们只需要最小化 $Dis_u,Dis_v$ 即可。</p><h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><p>现在的问题已经简化成了如何求一棵树上的 $Dis$ 的最小值。</p><p>首先我们需要一遍dfs将树的根节点的 $Dis$ 值找出来，找出来之后，我们就使用<a href="https://boctorio.com/2019/07/22/%E6%8D%A2%E6%A0%B9dp/" target="_blank" rel="noopener">换根dp</a>计算出树上所有节点的$Dis$值。</p><p>然后找出 $Dis$ 最小的点，进行连接，再次进行上述操作即可。</p><p>最后将所有节点的 $Dis$ 全部求和，由于这个值是求的双向的，因此需要除以2。</p><p>代码如下（代码有些冗长）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;vec[maxn];</span><br><span class="line">ll n;</span><br><span class="line">ll dp[maxn];</span><br><span class="line">ll num[maxn];</span><br><span class="line">ll vis[maxn];</span><br><span class="line">ll vis2[maxn];</span><br><span class="line">ll value[maxn];</span><br><span class="line">ll flag,point;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//清空数组 </span></span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(vis2,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis2));</span><br><span class="line"><span class="built_in">memset</span>(value,<span class="number">0</span>,<span class="keyword">sizeof</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;<span class="comment">//dfs找所有的值，num表示以这个点为根节点下面有几个点（包括这个点，dp用），value是这个点到所有子树的距离之和</span></span><br><span class="line">vis[x]=flag;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">ll y=vec[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line"><span class="keyword">int</span> q=dfs(y);</span><br><span class="line">sum+=q;</span><br><span class="line">value[x]+=value[y]+q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num[x]=sum+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">(ll x)</span></span>&#123;<span class="comment">//dp数组表示当前这个点到其他点的距离之和 </span></span><br><span class="line">vis2[x]=flag;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">ll y=vec[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis2[y])&#123;</span><br><span class="line">dp[y]=dp[x]-num[y]+point-num[y];<span class="comment">//换根dp方程 </span></span><br><span class="line">Dp(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vec[i].clear();</span><br><span class="line">init();</span><br><span class="line">ll u,v;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;u,&amp;v);</span><br><span class="line">vec[u].push_back(v);</span><br><span class="line">vec[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用flag的值对第一颗子树和第二棵子树进行区分，下同</span></span><br><span class="line">flag=<span class="number">1</span>; dfs(<span class="number">1</span>); dp[<span class="number">1</span>]=value[<span class="number">1</span>]; flag++;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">dfs(i);</span><br><span class="line">dp[i]=value[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//point是当前两个子树之一的点的个数</span></span><br><span class="line">point=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">1</span>) </span><br><span class="line">point++;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">Dp(<span class="number">1</span>); </span><br><span class="line">flag++;</span><br><span class="line">point=n-point;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!vis2[i])&#123;</span><br><span class="line">Dp(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到两个树上到其他点距离最小的点 </span></span><br><span class="line">ll v1=INF,v2=INF,p1,p2;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis2[i]==<span class="number">1</span> &amp;&amp; dp[i]&lt;=v1)&#123;</span><br><span class="line">p1=i;</span><br><span class="line">v1=dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis2[i]==<span class="number">2</span> &amp;&amp; dp[i]&lt;=v2)&#123;</span><br><span class="line">p2=i;</span><br><span class="line">v2=dp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vec[p1].push_back(p2);</span><br><span class="line">vec[p2].push_back(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新进行dfs 和 dp 计算出这棵大树的所有dp值</span></span><br><span class="line">init(); flag=<span class="number">1</span>; dfs(<span class="number">1</span>);</span><br><span class="line">dp[<span class="number">1</span>]=value[<span class="number">1</span>]; point=n; Dp(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//a-&gt;b  b-&gt;a计算两次，所以 /2</span></span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) res+=dp[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res/<span class="number">2l</span>l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6567&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接（杭电重现赛）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你两棵树，在这两棵树上分别找一个点，将其连接，使得$\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}dis(i,j)$ 最小，其中$dis(i,j)$表示从节点 $i$ 到节点 $j$ 的边数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="换根dp" scheme="https://boctorio.github.io/categories/%E6%8D%A2%E6%A0%B9dp/"/>
    
    
  </entry>
  
  <entry>
    <title>ABAB--2019牛客暑期多校训练营(第一场)- E题</title>
    <link href="https://boctorio.github.io/2019/07/18/ABAB-2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%9C%BA-E%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/07/18/ABAB-2019牛客暑期多校训练营-第一场-E题/</id>
    <published>2019-07-18T08:45:58.000Z</published>
    <updated>2019-09-03T11:52:19.546Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/881/E" target="_blank" rel="noopener">题目传送门</a></p><p>题目大意：</p><blockquote><p>构造一个长为 $2*(n+m)$ 的字符串，使得能从中按顺序挑出 $n$ 个”AB”子串和 $m$ 个”BA”子串，问这样的字符串一共有多少个。</p></blockquote><a id="more"></a><p>一个似乎比较明显的dp问题，类似于括号配对。</p><p>二维dp,dp[i][j],表示前i个字符,字母A和字母B的差为j个，然后就可以进行dp了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll dp[<span class="number">1000</span>*<span class="number">4</span>+<span class="number">10</span>][<span class="number">1000</span>*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n+m)*<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1000</span>-m<span class="number">-1</span>;j&lt;=<span class="number">1000</span>+n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">dp[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1000</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n+m)*<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1000</span>-m;j&lt;=<span class="number">1000</span>+n;j++)&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">dp[i][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[(n+m)*<span class="number">2</span>][<span class="number">1000</span>]%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/881/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;构造一个长为 $2*(n+m)$ 的字符串，使得能从中按顺序挑出 $n$ 个”AB”子串和 $m$ 个”BA”子串，问这样的字符串一共有多少个。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="dp" scheme="https://boctorio.github.io/categories/dp/"/>
    
      <category term="字符串" scheme="https://boctorio.github.io/categories/dp/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Count The Rectangles(Educational Codeforces Round 68-E题)</title>
    <link href="https://boctorio.github.io/2019/07/15/Count-The-Rectangles-Educational-Codeforces-Round-68-E%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/07/15/Count-The-Rectangles-Educational-Codeforces-Round-68-E题/</id>
    <published>2019-07-15T03:12:50.000Z</published>
    <updated>2019-08-09T00:06:56.550Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1194/problem/E" target="_blank" rel="noopener">题目传送门</a></p><p>题目大意为：</p><blockquote><p>给你n条水平或竖直的线段，问利用这些线段能够圈出多少个不同的矩形。</p></blockquote><a id="more"></a><p>如果利用四条线段圈出了一个矩形，那么两条平行线一定与竖直线都相交。因此，我们只需要求与任意两条水平线均相交的竖直线的数量，然后进行排列组合 $(n*(n-1)/2)$ ,就能够找出用这两条水平线所能够圈出来的矩形的个数。</p><p>所以我们首先需要将所有的水平线与竖直线的相交情况计算出来，之后再进行枚举计算即可。</p><p>但是由于数据范围过大，在枚举两条水平线后如果再用一个循环来寻找竖直线的相交情况会超时，因此我们需要用<strong>bitset</strong>来处理最后一个循环。<strong>bitset</strong> 用法详见<a href="">bitset用法</a>。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">&#125;R[<span class="number">5000</span>+<span class="number">10</span>],C[<span class="number">5000</span>+<span class="number">10</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;5000+10&gt;p1[<span class="number">5000</span>+<span class="number">10</span>],p2[<span class="number">5000</span>+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(node i,node j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((i.y2&gt;=j.y1 &amp;&amp; j.y1&gt;=i.y1) &amp;&amp; (j.x2&gt;=i.x1 &amp;&amp; i.x1&gt;=j.x1) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n,a,b,c,d;</span><br><span class="line"><span class="keyword">int</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line"><span class="keyword">if</span>(a==c)&#123;</span><br><span class="line">R[sum1].x1=a; R[sum1].y1=min(b,d); R[sum1].x2=c; R[sum1++].y2=max(b,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">C[sum2].x1=min(a,c); C[sum2].y1=b; C[sum2].x2=max(a,c); C[sum2++].y2=d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sum2;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(judge(R[i],C[j]))&#123;</span><br><span class="line">p1[i][j]=<span class="number">1</span>; p2[j][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll res=<span class="number">0</span>,sum;</span><br><span class="line">    <span class="comment">//选择数量较少的水平线或竖直线进行计算</span></span><br><span class="line"><span class="keyword">int</span> N=min(sum1,sum2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum1&lt;sum2) sum=(p1[i] &amp; p1[j]).count();</span><br><span class="line"><span class="keyword">else</span>     sum=(p2[i] &amp; p2[j]).count();</span><br><span class="line">res+=sum*(sum<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1194/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你n条水平或竖直的线段，问利用这些线段能够圈出多少个不同的矩形。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="bitset" scheme="https://boctorio.github.io/categories/bitset/"/>
    
    
  </entry>
  
  <entry>
    <title>bitset用法</title>
    <link href="https://boctorio.github.io/2019/07/15/bitset%E7%94%A8%E6%B3%95/"/>
    <id>https://boctorio.github.io/2019/07/15/bitset用法/</id>
    <published>2019-07-15T03:11:57.000Z</published>
    <updated>2019-08-09T00:06:36.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>bitset</strong> 与<strong>map,vector,queue</strong>等相似，为<strong>C++</strong>标准函数库中的一类容器。其结构类似于数组，但是只能够存放0或1。</p><a id="more"></a><h3 id="bitset的定义"><a href="#bitset的定义" class="headerlink" title="bitset的定义"></a>bitset的定义</h3><p>在定义<strong>bitset</strong> 时，一般有以下几种方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个大小为10的bitset</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个大小为10，初始数据为10的bitset</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit2(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个大小为10，初始数据为10110的bitset</span></span><br><span class="line"><span class="built_in">string</span> str1=<span class="string">"10110"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit3(str1);</span><br></pre></td></tr></table></figure><p>以上三种方法构造出来的bitset所储存的数据分别为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000001010</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit3 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000010110</span></span><br></pre></td></tr></table></figure><p>在定义时后面加的<strong>(10) 、（str1)</strong>作用均为初始化。<br>其中利用<strong>string</strong>进行初始化时字符串中只能包含0或1，包含其他字符时就会报错。</p><p>在初始化时，如果初始化数据大小小于定义的<strong>bitset</strong>大小，那么就直接右对齐，否则：</p><blockquote><p>如果初始化的数字大于定义的bitset大小，则留下后面部分，舍去高位数据<br>如果初始化的字符串长度大于定义的bitset大小，则留下前面部分，舍去低位数据</p></blockquote><p>从其储存的数据来看，其结构类似于<strong>bool</strong>数组，但其功能要比<strong>bool</strong>数组多得多。</p><h3 id="bitset位运算"><a href="#bitset位运算" class="headerlink" title="bitset位运算"></a>bitset位运算</h3><p>对bitset进行位运算时，可以把它当作数字来进行计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit1(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit2(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bit1&lt;&lt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000110</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bit2&gt;&gt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000010</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bit1 &amp; bit2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000001</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bit1 | bit2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000111</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bit1 ^ bit2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000110</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>两个bitset进行位运算时，只能够数组大小相同才能够运算，否则就会报错。</strong></p><p>另外，对bitset中元素进行修改时，可按照数组的方式进行修改。<strong>但是其下标顺序为从右到左，最右数组元素下标为0。</strong></p><h3 id="bitset功能函数"><a href="#bitset功能函数" class="headerlink" title="bitset功能函数"></a>bitset功能函数</h3><p>bitset与其他容器一样，也有许多函数：</p><h4 id="统计判断函数"><a href="#统计判断函数" class="headerlink" title="统计判断函数"></a>统计判断函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit1(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.count() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//2  //计算bit1中又多少个1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.any() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//1  //判断其中是否有1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.none() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//0  //判断其中是否全为0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.all() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//0  //盘但其中是否全为1</span></span><br></pre></td></tr></table></figure><h4 id="位运算函数"><a href="#位运算函数" class="headerlink" title="位运算函数"></a>位运算函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit1(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.flip() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//1111110101 //将所有元素倒置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.flip(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1111111101 //将数组下标为3的元素倒置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.<span class="built_in">set</span>() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//1111111111 //全部重置1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.<span class="built_in">set</span>(<span class="number">3</span>,<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1111110111 //将数组下标为3的元素置为0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.<span class="built_in">set</span>(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//1111111111 //如果没有第二个参数，默认为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.reset(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1111110111 //将数组下标为3的元素置为0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit1.reset() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000000000 //将所有元素置为0</span></span><br></pre></td></tr></table></figure><h4 id="转化函数"><a href="#转化函数" class="headerlink" title="转化函数"></a>转化函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;10&gt;bit1(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">string</span> str=bit1.to_string(); <span class="comment">//转化为字符串</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> a=bit1.to_ulong();<span class="comment">//转化为unsigned long </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//0000001010</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>本文参考于<a href="https://www.cnblogs.com/magisk/p/8809922.html" target="_blank" rel="noopener">长岛冰茶、的博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;bitset&lt;/strong&gt; 与&lt;strong&gt;map,vector,queue&lt;/strong&gt;等相似，为&lt;strong&gt;C++&lt;/strong&gt;标准函数库中的一类容器。其结构类似于数组，但是只能够存放0或1。&lt;/p&gt;
    
    </summary>
    
      <category term="bitset" scheme="https://boctorio.github.io/categories/bitset/"/>
    
    
  </entry>
  
</feed>
