<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boctorio&#39;s Blog</title>
  
  <subtitle>欢迎访问我校OJ   https://www.hpuoj.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://boctorio.github.io/"/>
  <updated>2019-03-02T04:46:33.283Z</updated>
  <id>https://boctorio.github.io/</id>
  
  <author>
    <name>Boctorio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并查集</title>
    <link href="https://boctorio.github.io/2019/03/02/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://boctorio.github.io/2019/03/02/并查集/</id>
    <published>2019-03-02T03:15:44.000Z</published>
    <updated>2019-03-02T04:46:33.283Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。</p><p>简而言之，并查集就是将一些具有一定关系的元素进行合并，以此来减少查询的时间。</p><p>并查集是基于树形结构的数据而使用的。</p><a id="more"></a><h4 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h4><p>接下来看一个题目：</p><blockquote><p>   某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ </p><p>Input</p><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。  </p><p>Output</p><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。  </p></blockquote><p>这个题就是经典的并查集。可以看出，当两个城镇互相联通（直接或间接）时，这两个城镇之间就不需要再进行任何道路建设。所以我们需要找出有多少个<strong>城镇集合</strong>是互不联通的。</p><p>如何说明和标记两个城镇是否互相联通？解决这个问题，就是我们的最终目的。</p><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>给出一个上面题目的一个样例：</p><blockquote><p>5 2</p><p>1 2</p><p>3 5</p></blockquote><p>它所对应的图形为：</p><p><img src="/2019/03/02/并查集/并查集-1.png" alt=""></p><p>如果仅仅从图片上看，我们很明显的可以看出来答案是2。</p><p>由于所有元素各不相同，对于每个集合，总会有一个最小值，而我们一般把这个最小值作为每个集合的根节点。</p><p>以上图为例，1,2,3,4,5对应的根节点分别为 1,1,3,3,4。总共有3种根节点，因此答案为3-1=2；</p><p>也可以说，总共有3个元素对应的根节点是其本身。</p><p>并查集的作用就是是每个集合里面的元素都找到其对应的根节点。</p><p>当我们合并两个元素时，这两个元素可能并不是自己所在集合的根节点，因此我们需要找到其对应的根节点，然后将两个根节点进行合并。</p><p>网上有一个很形象的比喻：</p><blockquote><p>话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p><p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物，这样，每个圈子就可以这样命名“齐达内朋友之队”“罗纳尔多朋友之队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。</p><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,u,v;</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//刚开始每个节点的根节点都是其本身 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dep[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=dep[x])</span><br><span class="line">dep[x]=find(dep[x]);<span class="comment">//这个的作用就是递归找到最后的根节点</span></span><br><span class="line"><span class="keyword">return</span> dep[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//将两个元素进行合并，两个根节点不一样，就将两个根节点进行合并，大的合并到小的根节点上 </span></span><br><span class="line"><span class="keyword">int</span> dx=find(x);</span><br><span class="line"><span class="keyword">int</span> dy=find(y);</span><br><span class="line"><span class="keyword">if</span>(dx&lt;dy) dep[dy]=dx;<span class="comment">//将大的合并到小的上面</span></span><br><span class="line"><span class="keyword">else</span> dep[dx]=dy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="keyword">if</span>(find(u)!=find(v)) Union(u,v);<span class="comment">//如果两个元素根节点不一样，就进行合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//统计总共有多少个根节点，即集合</span></span><br><span class="line"><span class="keyword">if</span>(dep[i]==i) res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面的例子，函数init()就是创造一个最初的江湖，find()就是用来找到自己的队长，Union()就是来将两位大侠所在的队伍结盟。对于一个队伍来说，队伍的操作只能由队长来进行，所以我们最后只需要将两个队长串联起来就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。&lt;/p&gt;
&lt;p&gt;简而言之，并查集就是将一些具有一定关系的元素进行合并，以此来减少查询的时间。&lt;/p&gt;
&lt;p&gt;并查集是基于树形结构的数据而使用的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="https://boctorio.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://boctorio.github.io/2019/03/02/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/03/02/背包问题/</id>
    <published>2019-03-02T00:59:21.000Z</published>
    <updated>2019-03-02T03:03:06.718Z</updated>
    
    <content type="html"><![CDATA[<p>背包问题是很经典的dp问题，在许多基础的比赛中都会用到。可以这样说，背包问题就是学习dp的第一步，但是其难度对于初学者来说也并不小。</p><p>这篇文章主要介绍一下基础的01背包和完全背包。</p><a id="more"></a><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h4><p>01背包是最简单的背包问题，其大致描述为：</p><blockquote><p>有N件物品和一个容量为V的背包。第i件物品的重量是w[i]，价值是v[i]。求解将哪些物品装入背包可使这些物品的重量总和不超过背包容量，且价值总和最大。</p></blockquote><h5 id="二维dp"><a href="#二维dp" class="headerlink" title="二维dp"></a>二维dp</h5><p>这里我们用一个二维数组dp[maxn][maxn] 来求解背包问题。</p><p>其中第一维表示前 i 个物品，第二维表示前 i 个物品在容量为 j 时的最大价值总和。</p><p>这里有一个状态方程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);</span><br></pre></td></tr></table></figure><p>dp[ i ][ j ]上面说过，表示的是前 i 件物品在容量为 j 时的最大价值，那么得到dp[ i ][ j ]，其中就涉及到了关于第 i 件物品选和不选的问题。</p><p>当我们选择第 i 件物品时，总容量为 j ，我们需要腾出来 w[ i ] 的空间来装第 i 件物品，因此得出当选择第 i 件物品时的最大价值 dp[ i - 1 ][ j - w[ i ] ] + v[ i ]。</p><p>当我们不选择第 i 件物品时，那么之前的容量也必然为 j ，因为没有东西放进去，所以我们可以得到当不选择第 i 件物品时的最大价值 dp[ i - 1 ][ j ]。</p><p>理解了方程的意义，我们就可以写出来解决背包问题的代码了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=V;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;v[i]) dp[i][j]=dp[i<span class="number">-1</span>][j];<span class="comment">//容量太小，装不下第 i 个物品 </span></span><br><span class="line"><span class="keyword">else</span> dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终求出来的dp[N][V]即为答案。</p><p>这是用二维数组来求解最大价值。我们如果在纸上模拟这个过程，会发现在两层 for 循环的情况下，每个位置的值只会变化一次，当第 i 行求解完之后，我们就再也不会改变第 i 行的值了。</p><p>那么这对空间的要求是巨大的，我们是否可以把二维数组压缩成一位数组？答案是可以！</p><h5 id="一维dp"><a href="#一维dp" class="headerlink" title="一维dp"></a>一维dp</h5><p>我们如果在纸上模拟这个过程，会发现在两层 for 循环的情况下，每个位置的值只会变化一次，当第 i 行求解完之后，我们就再也不会改变第 i 行的值了。</p><p>上面的代码过程用图像可以表示为：</p><p><img src="/2019/03/02/背包问题/01背包-1.png" alt=""></p><p>从上面代码和图片中可以看出，影响dp[ i ][ j ]的值为 dp[ i - 1][ j ] 和dp[ i - 1 ][ j - w[ i ] ]，两个数的一维二维坐标均小于等于 i , j ，所以我们第一步先改变一下循环的顺序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=<span class="number">1</span>;j--)&#123;<span class="comment">//这里的循环顺序改变了</span></span><br><span class="line"><span class="keyword">if</span>(j&lt;v[i]) dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果表示成一维的话，那么过程就变成了：</p><p><img src="/2019/03/02/背包问题/01背包-2.png" alt=""></p><p>可以发现，此时代码中   <strong>if(j&lt;v[i]) dp[i][j]=dp[i-1][j]</strong> 已经失去了原本的作用。</p><p>然后将二维数组压缩成一位数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=w[i];j--)&#123;<span class="comment">//根据上面的代码，这里假如j&lt;w[i]时，dp[j]=dp[j],可以直接省略</span></span><br><span class="line">dp[j]=max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里可能有人疑问，为什么循环顺序要变化？</p><p>当我们从前往后改变一维数组的值时，我们可能会改变了后面的数的正确的值，因为后面的数还会用到前面的是，从而导致最终结果偏离正确结果。</p><p>所以我们选用从后往前的方式进行遍历，前面已经说过，影响这个元素的值一维二维坐标均小于当前坐标，所以即使我们改变了后面的数值，也不会对前面的值有影响。</p><p>这样，我们就可以节省大量的空间（还在第二层循环时减少了时间）。</p><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><blockquote><p>有N种物品和一个容量为V的背包。第i种物品的重量是w[i]，价值是v[i]。每种物品都可以无限件使用。求解将哪些物品装入背包可使这些物品的重量总和不超过背包容量，且价值总和最大。</p></blockquote><p>完全背包和01背包最大的区别就是物品件数的改变。完全背包每种物品可以无限次使用，而01背包只是用一次。</p><p>我们再来看一下01背包一维dp时循环顺序的问题。</p><p>上面已经说过，假如第二层for循环的顺序是j++，那么最终结果会偏离正确结果。但是是怎么偏离的呢？我们继续深入探讨一下。</p><blockquote><p>假如dp[ j ]&lt;dp[ j - w[ i ] ] + v[ i ] ，那么dp[ j ]=dp[ j - w[ i ] ] + v[ i ]，</p><p>然后对于 k ( j &lt; k &lt;= V)，如果dp[ j ]影响到了dp[ k ] ，那么影响的结果一定是dp[ k ] = dp[ k - w[ i ] ] + v[ i ],其中 k - w[ i ] = j ( 只考虑直接影响 )，</p><p>所以我们可以继续递推得出dp[ k ] = dp[ j - w[ i ] ] +v[ i ] +v[ i ]=dp[ j - w[ i ] ] + 2 * v[ i ]。</p></blockquote><p>这里我们就发现，v[ i ]被使用了两次，这在01背包中肯定是错误的，但是在完全背包中却没有任何问题，因为每件物品可以无限次使用，因此我们就可以得出完全背包的求解方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=w[i];j&lt;=V;j++)&#123;</span><br><span class="line">dp[j]=max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和01背包的区别只在于第二层循环的顺序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背包问题是很经典的dp问题，在许多基础的比赛中都会用到。可以这样说，背包问题就是学习dp的第一步，但是其难度对于初学者来说也并不小。&lt;/p&gt;
&lt;p&gt;这篇文章主要介绍一下基础的01背包和完全背包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="背包" scheme="https://boctorio.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>最长单调子序列</title>
    <link href="https://boctorio.github.io/2019/02/08/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://boctorio.github.io/2019/02/08/最长连续子序列/</id>
    <published>2019-02-08T12:49:46.000Z</published>
    <updated>2019-03-02T00:36:11.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最长上升子序列（LIS）"><a href="#最长上升子序列（LIS）" class="headerlink" title="最长上升子序列（LIS）"></a>最长上升子序列（LIS）</h3><blockquote><p>问题描述：</p><p>​    给你一个序列，让你求出其中的最长的上升子序列。</p><p>​    比如数组{1,5,3,2,4},其最长递增子序列为{1,3,4}或{1,2,4}。</p></blockquote><a id="more"></a><h4 id="dp求解（小范围数据）"><a href="#dp求解（小范围数据）" class="headerlink" title="dp求解（小范围数据）"></a>dp求解（小范围数据）</h4><p>在长度 n 较小的情况下，我们可以用dp的方式来求解，复杂度为O(n^2) :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;a[j]) dp[j]=max(dp[j],dp[i]+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果是最长非递减的话，则if(a[i]&lt;=a[j])</span></span><br><span class="line">&#125;</span><br><span class="line">res=max(res,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个理解起来还算容易，当我们求出前m（m&lt;=n）个数的LIS长度时，那么我们就可以求出当前状态下m后面的数的最长长度。</p><p>因为m和m+1之间没有其他的数字，所以我们可以认为我们求出了前m+1个数的LIS长度。</p><p>然后依次递推，就可以求出n个数的LIS。</p><h4 id="dp求解（大范围数据）"><a href="#dp求解（大范围数据）" class="headerlink" title="dp求解（大范围数据）"></a>dp求解（大范围数据）</h4><p>当n比较大时,O(N^2)的时间复杂度明显没办法满足需要，所以我们需要更高效的方法。</p><p>当我们循环遍历时，我们可以把当前的最长的LIS存储下来。</p><p>对于样例{1,5,3,2,4}，我们储存的顺序依次为：</p><blockquote><p>{1}，</p><p>{1,5}</p><p>{1,3}</p><p>{1,2}</p><p>{1,2,,4}</p></blockquote><p>这个刚开始理解起来比较难理解。对于第二步{1,5}来说，当前的LIS长度为2，由LIS的特性可知，我们希望前面的元素尽量的小。</p><p>所以当遍历到第三个元素时，由于{1,5}，{1,3}长度均为2，但我们更希望值小一点，所以我们就用3来代替了5的值。</p><p>第四个元素也一样。</p><p>第五个元素{4}，由于当前我们保存的LIS{1,2}最大值小于4，因此我们就把4放进来，所以最终结果就为3。</p><p><strong>注意：储存的元素并不是LIS的值，这个储存的值只是用来寻找LIS的。</strong></p><p>再来看一个样例：{1,3,5,4,6,2}，存储的顺序依次为：</p><blockquote><p>{1}</p><p>{1,3}</p><p>{1,3,5}</p><p>{1,3,4}</p><p>{1,3,4,6}</p><p>{1,2,4,6}</p></blockquote><p>对于第6步，因为2&lt;6，所以我们一定能找到替换2的元素。而我们希望储存的序列尽可能的小，所以我们需要找到2能替换的最小的元素。因此我们的替换操作为3 -&gt; 2。</p><p>这一步可以理解为：<strong>找到储存的序列中比当前元素大（或者相等）的第一个元素，进行替换</strong>。</p><p>因为我们在储存时保证了储存的元素单调，因此我们在寻找替换位置时可以用高效的二分法，所以这种方法的复杂度为O( n*log(n) )。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(dp[mid]&lt;x)&#123;<span class="comment">//小于的话肯定不是被替换的元素，因此可以+1 </span></span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//大于等于的情况下这个元素可能是被替换的元素，所以我们不能忽略这个元素 </span></span><br><span class="line">r=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">()</span></span>&#123;</span><br><span class="line">fill(dp,dp+n,INF);<span class="comment">//将dp里面的元素全部替换为INF </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=find(a[i]);</span><br><span class="line">dp[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=find(INF);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出LIS的元素"><a href="#输出LIS的元素" class="headerlink" title="输出LIS的元素"></a>输出LIS的元素</h4><p>在前面已经说过，储存的值并不是LIS的元素，那么我们如何来输出LIS呢？</p><p>前面已经说过，我们的操作都是找到储存的序列中第一个比当前元素大（或者相等）的位置，那么这个元素的前面一个元素一定是它左边的那个元素，因此我们需要用一个数组来储存每个元素的前驱。</p><p>因此我们在上面的代码上做一些小修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];<span class="comment">//用来记录每个元素的前驱</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//用来输出LIS的元素（可能有多个答案，这里只取其中一种）</span></span><br><span class="line"><span class="keyword">if</span>(pre[x]!=<span class="number">0</span>) output(pre[x]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(dp[mid]&lt;x)&#123;<span class="comment">//小于的话肯定不是被替换的元素，因此可以+1 </span></span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//大于等于的情况下这个元素可能是被替换的元素，所以我们不能忽略这个元素 </span></span><br><span class="line">r=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">()</span></span>&#123;</span><br><span class="line">fill(dp,dp+n,INF);<span class="comment">//将dp里面的元素全部替换为INF </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=find(a[i]);</span><br><span class="line">dp[pos]=a[i];</span><br><span class="line">pre[ dp[pos] ]=dp[pos<span class="number">-1</span>];<span class="comment">//当前元素所对应的前一个元素的值。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=find(INF);</span><br><span class="line">output(dp[res<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以输出LIS的元素了。</p><h4 id="最长下降子序列（LDS"><a href="#最长下降子序列（LDS" class="headerlink" title="最长下降子序列（LDS)"></a>最长下降子序列（LDS)</h4><p>最长下降子序列求解方法和LIS相似，只需要把元素的位置翻一下即可求解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最长上升子序列（LIS）&quot;&gt;&lt;a href=&quot;#最长上升子序列（LIS）&quot; class=&quot;headerlink&quot; title=&quot;最长上升子序列（LIS）&quot;&gt;&lt;/a&gt;最长上升子序列（LIS）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;​    给你一个序列，让你求出其中的最长的上升子序列。&lt;/p&gt;
&lt;p&gt;​    比如数组{1,5,3,2,4},其最长递增子序列为{1,3,4}或{1,2,4}。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="子序列" scheme="https://boctorio.github.io/tags/%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GCD与LCM及其部分性质</title>
    <link href="https://boctorio.github.io/2019/02/01/GCD%E4%B8%8ELCM%E5%8F%8A%E5%85%B6%E9%83%A8%E5%88%86%E6%80%A7%E8%B4%A8/"/>
    <id>https://boctorio.github.io/2019/02/01/GCD与LCM及其部分性质/</id>
    <published>2019-02-01T11:32:38.000Z</published>
    <updated>2019-02-02T13:17:47.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><p>GCD，即最大公约数，指两个或多个整数共有约数中最大的一个。</p><p>求最大公约数有多种方法，常见的有质因数分解法、短除法、辗转相除法、更相减损法。</p><p>在一般竞赛中，求GCD一般使用辗转相除法。其复杂度约为O(log(max(n,m)))，是一种很高效的算法。而且其代码量也非常少</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? gcd(b,a%b) : a; &#125;</span><br></pre></td></tr></table></figure><h4 id="拓展性质"><a href="#拓展性质" class="headerlink" title="拓展性质"></a>拓展性质</h4><p>如果GCD( n , a ) = 1 , n&gt;a 则GCD( n , n - a ) = 1。</p><p>可以用反证法证明</p><blockquote><p>假设GCD( n , n - a ) = i   ( i &gt; 1 )，设 n = k1 * i，n - a = k2 * i（ k1 &gt; k2 &gt; 0 ），</p><p>则 n -( n -a ) = a = (k1-k2) * i，与GCD( n , a ) = 1 矛盾，所以上述性质成立。</p></blockquote><h4 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h4><p>设a , b为常数，对于一个表达式 a * x + b * y =GCD( a , b ) ，一定存在解（ x , y）使之成立。</p><p>我们就可以通过扩展原来的辗转相除法来求解。</p><p>求解的过程如下（最好自己手推一下）：</p><blockquote><p>初始表达式<br>$$<br>a * x + b * y =GCD( a , b )<br>$$<br>由之前的知识可得<br>$$<br>GCD( a , b ) =GCD( b , a \% b )<br>$$<br>因此<br>$$<br>a*x_1+b*y_1=GCD( a , b ) =GCD( b , a\%b ) =b*x_2+(a\%b)*y_2<br>$$</p><p>$$<br>a\%b=a-[a/b]*b<br>$$</p><p>其中[a/b]表示整除。带入化简可得：<br>$$<br>a*x_1+b*y_1=a*x_2+b*(x_2-[a/b])*y_2<br>$$<br>由恒等关系可得<br>$$<br>x_1=y_2<br>$$</p><p>$$<br>y_1=(x_2-[a/b])<br>$$</p><p>因此我们只要求出 x2 和 y2 的值就可以求解 x1 和 y1。而 x2 ,  y2 可通过同种方法求解。</p><p>特别的，当 b=0时，表达式为 a * x + b * y = GCD( a , b ) =GCD( a , 0 ) = 0 </p><p>此时,可求得 x = 1 。y 的值对表达式的值没有影响。</p><p>上面就是求解初始表达式的方法。</p></blockquote><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">extGcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span><span class="comment">//这里取 x , y的地址 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;<span class="comment">//函数的返回值一直是 gcd(a,b) </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r=exGcd(b,a%b,x,y);</span><br><span class="line">    <span class="keyword">int</span> t=x;</span><br><span class="line">x=y;   <span class="comment">//x1=y2</span></span><br><span class="line">y=t-a/b*y;<span class="comment">//y1=x2-[a/b]*b</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCM"><a href="#LCM" class="headerlink" title="LCM"></a>LCM</h3><p>LCM，即最小公倍数，指两个或多个整数共有倍数中最小的一个。</p><p>LCM的求法可以基于GCD的基础上：<br>$$<br>LCM(a,b)=a*b/GCD(a,b)<br>$$<br>证明略。</p><p>一般题目求解时使用GCD更多一些，所以LCM相关知识就不多写了。(我也没找到太多关于LCM的相关文献)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GCD&quot;&gt;&lt;a href=&quot;#GCD&quot; class=&quot;headerlink&quot; title=&quot;GCD&quot;&gt;&lt;/a&gt;GCD&lt;/h3&gt;&lt;p&gt;GCD，即最大公约数，指两个或多个整数共有约数中最大的一个。&lt;/p&gt;
&lt;p&gt;求最大公约数有多种方法，常见的有质因数分解法、短除法、辗转相除法、更相减损法。&lt;/p&gt;
&lt;p&gt;在一般竞赛中，求GCD一般使用辗转相除法。其复杂度约为O(log(max(n,m)))，是一种很高效的算法。而且其代码量也非常少&lt;/p&gt;
    
    </summary>
    
    
      <category term="GCD" scheme="https://boctorio.github.io/tags/GCD/"/>
    
      <category term="LCM" scheme="https://boctorio.github.io/tags/LCM/"/>
    
      <category term="数论" scheme="https://boctorio.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数及其部分性质</title>
    <link href="https://boctorio.github.io/2019/02/01/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E9%83%A8%E5%88%86%E6%80%A7%E8%B4%A8/"/>
    <id>https://boctorio.github.io/2019/02/01/欧拉函数及其部分性质/</id>
    <published>2019-02-01T09:16:15.000Z</published>
    <updated>2019-02-11T04:59:03.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p>在数论，<strong>对正整数n，欧拉函数是小于n的正整数中与n互质的数的数目（φ(1)=1）</strong>。此函数以其首名研究者欧拉命名(Euler’s totient function)，它又称为Euler’s totient function、φ函数、欧拉商数等。 例如φ(8)=4，因为1,3,5,7均和8互质。 从欧拉函数引伸出来在环论方面的事实和拉格朗日定理构成了欧拉定理的证明。</p><p>欧拉函数的适用范围非常大，许多题目中都会用到欧拉函数的性质。</p><a id="more"></a><h5 id="欧拉函数表达式1："><a href="#欧拉函数表达式1：" class="headerlink" title="欧拉函数表达式1："></a>欧拉函数表达式1：</h5><p>欧拉函数的表达为：<br>$$<br>\varphi (x)=x\prod_{i=1}^{n}{(1-\frac{1}{p_i})}<br>$$</p><p>其中p1,p2,…,pn 表示x的所有质因子，x是不为0的整数。</p><h5 id="欧拉函数表达式2："><a href="#欧拉函数表达式2：" class="headerlink" title="欧拉函数表达式2："></a>欧拉函数表达式2：</h5><p>假设<br>$$<br>x= {p_1}^{k_1} * {p_2}^{k_2} * … * {p_n}^{k_n}<br>$$</p><p>p1,p2,…,pn同上，则其另一种表达为：<br>$$<br>\varphi(x)=\prod_{i=1}^{n}{(p_i-1)*p_i^{k_i-1}}<br>$$</p><p>特别的，<br>$$<br>\varphi(1)=1<br>$$</p><h4 id="欧拉函数证明"><a href="#欧拉函数证明" class="headerlink" title="欧拉函数证明"></a>欧拉函数证明</h4><h5 id="容斥定理来证明"><a href="#容斥定理来证明" class="headerlink" title="容斥定理来证明"></a>容斥定理来证明</h5><p>对于正整数 x 而言，假设其质因子为p1,p2,p3,…,pn，则小于等于 x 且与 x 不互质的数字的个数为：<br>$$<br>g(x)=\frac{x}{p_1}+\frac{x}{p_2}+…+\frac{x}{p_n}-\frac{x}{p_1*p_2}-\frac{x}{p_1*p_3}- …<br>$$</p><p>小于 x 且与 x 互质的数字的个数：<br>$$<br>f(x)=x-g(x)=n-\frac{x}{p_1}-\frac{x}{p_2}- … -\frac{x}{p_n}+\frac{x}{p_1*p_2}+\frac{x}{p_1*p_3}+ …<br>$$</p><p>化简即可得表达式1。（具体化简过程我也不会）</p><h4 id="欧拉函数计算"><a href="#欧拉函数计算" class="headerlink" title="欧拉函数计算"></a>欧拉函数计算</h4><h5 id="单值计算"><a href="#单值计算" class="headerlink" title="单值计算"></a>单值计算</h5><p>在编程时，习惯上，我们经常用<strong>表达式2</strong>计算欧拉函数的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eular</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n%i==0时，i为n的质因子，因为如果i不是质因子，</span></span><br><span class="line"><span class="comment">则一i定能分成更小的因子，对应的更小的因子一定在之前出现过了，与之矛盾，</span></span><br><span class="line"><span class="comment">所以i一定不能分割成更小的因子，即i为n的质因子。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n/=i,ret*=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i,ret*=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ret*=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打表计算"><a href="#打表计算" class="headerlink" title="打表计算"></a>打表计算</h5><h4 id="欧拉函数性质"><a href="#欧拉函数性质" class="headerlink" title="欧拉函数性质"></a>欧拉函数性质</h4><h5 id="互质数之和"><a href="#互质数之和" class="headerlink" title="互质数之和"></a>互质数之和</h5><p>小于n的正整数中与n互质的数的数字之和为<br>$$<br>f(n)={n}*\frac{\varphi(n)}{2}<br>$$</p><p>证明如下：</p><blockquote><p>对于每个小于 n 的数正整数 a ，如果gcd( n , a )=1,则gcd( n , n-a )=1（ 此处为gcd相关性质，不再证明。）。</p><p>所以对于每个与 n 互质的正整数 a ，一定有一个与之对应的与 n 互质数的 n - a ;</p><p>由此可知，欧拉函数的值总为偶数（1除外），并且总有一对之和为 n，</p><p>至此，小于n的正整数中与n互质的数的数字之和就可以计算出来了。</p></blockquote><h5 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h5><p>欧拉函数是一个积性函数，如果 n , m 互质，则：<br>$$<br>\varphi(nm)=\varphi(n)*\varphi(m)<br>$$<br>可以推出，如果n为质数，则：<br>$$<br>\varphi(2n)=\varphi(n)<br>$$</p><h5 id="欧拉定理变式"><a href="#欧拉定理变式" class="headerlink" title="欧拉定理变式"></a>欧拉定理变式</h5><p>对于任何两个互质的正整数 a , n ，(n&gt;2)<br>$$<br>{a}^{\varphi(n)}\equiv 1 mod n<br>$$</p><h5 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h5><p>当 n = p 且 a 与素数 p 互质时，上式可变为</p><p>$$<br>{a}^{p-1}\equiv 1 mod p<br>$$</p><h5 id="n的因数（包括1和它自己）的欧拉函数之和等于n"><a href="#n的因数（包括1和它自己）的欧拉函数之和等于n" class="headerlink" title="n的因数（包括1和它自己）的欧拉函数之和等于n"></a>n的因数（包括1和它自己）的欧拉函数之和等于n</h5><p>写成数学表达式的形式即为<br>$$<br>n=\sum_{d|n}\varphi(d)<br>$$<br>其中 d|n 表示 n 能被 d 整除。</p><p>证明如下：</p><blockquote><p>对于每个 x ( 0 &lt;= x &lt;= n ) 都存在一个gcd( x , n )，可以证得，其值必然为n的因子。</p><p>假设gcd( x , n ) = d ,（ d | n ） ，则gcd（ x / d , n / d ）= 1 ，即 x / d 与 n / d 互质。</p><p>因此，我们可以求出 gcd( x , n ) 的值为 d 时对应的的数字个数，个数就是 n / d 所对应的欧拉函数值。</p><p>由第一行可知，gcd( x , n )的值必然为n的因子，并且只有唯一对应值，因此就可推导出上述公式。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h3&gt;&lt;h4 id=&quot;欧拉函数-1&quot;&gt;&lt;a href=&quot;#欧拉函数-1&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h4&gt;&lt;p&gt;在数论，&lt;strong&gt;对正整数n，欧拉函数是小于n的正整数中与n互质的数的数目（φ(1)=1）&lt;/strong&gt;。此函数以其首名研究者欧拉命名(Euler’s totient function)，它又称为Euler’s totient function、φ函数、欧拉商数等。 例如φ(8)=4，因为1,3,5,7均和8互质。 从欧拉函数引伸出来在环论方面的事实和拉格朗日定理构成了欧拉定理的证明。&lt;/p&gt;
&lt;p&gt;欧拉函数的适用范围非常大，许多题目中都会用到欧拉函数的性质。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://boctorio.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="欧拉函数" scheme="https://boctorio.github.io/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>HDU-2036（多边形面积）</title>
    <link href="https://boctorio.github.io/2019/01/17/HDU-2036/"/>
    <id>https://boctorio.github.io/2019/01/17/HDU-2036/</id>
    <published>2019-01-17T06:52:20.000Z</published>
    <updated>2019-03-01T14:42:57.170Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>给你一个多边形，求它的面积。</p><p>多边形面积可以用向量知识来求解。</p><p>对于一个<strong>凸多边形</strong>，如下：</p><a id="more"></a><p><img src="/2019/01/17/HDU-2036/凸.png" alt=""></p><p>其面积可以表示为 S = S△OAB+S△OBC+S△OCD+S△ODE</p><p>对于△OAB 其面积用向量表示为 0.5 * |OA| * |OB| * sin∠AOB=0.5 * | <strong>OA</strong> x <strong>OB</strong>|</p><p>其中<strong>OA</strong> x <strong>OB</strong>表示叉乘（非点乘，具体详见百度百科“向量积”）</p><p>但因为向量叉乘有正有负，所以我们取的是绝对值，保证题目答案的正负。（正负取决于两条边的位置状态）</p><p>这时候就可以简单的计算出多边形的面积。</p><p>对于一个 <strong>凹多边形</strong>，如下：</p><p><img src="/2019/01/17/HDU-2036/凹.png" alt=""></p><p>其面积依然就可以用向量的方法求解</p><p>假设点O为坐标原点，则 S = S△OAB+S△OBC+S△OCD+S△ODE+S△OEA</p><p>S△OAB = 0.5 * <strong>OA</strong> x <strong>OB</strong> =0.5 * ( A.x * B.y - A.y * B.x )</p><p>其中S均表示在叉乘意义下的值，由于其具有正负之分，所以可以用来计算凹多边形的面积（具体证明过程略）。</p><p>这时候就可以计算出多边形的面积。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>]=a[n];</span><br><span class="line">b[<span class="number">0</span>]=b[n];</span><br><span class="line"><span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">res=res+(a[i]*b[i+<span class="number">1</span>]-b[i]*a[i+<span class="number">1</span>])/<span class="number">2</span>;<span class="comment">//由于是逆时针方向，所以求出来结果为正。 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;给你一个多边形，求它的面积。&lt;/p&gt;
&lt;p&gt;多边形面积可以用向量知识来求解。&lt;/p&gt;
&lt;p&gt;对于一个&lt;strong&gt;凸多边形&lt;/strong&gt;，如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="几何" scheme="https://boctorio.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>广西大学第一届程序设计大赛-数论只会GCD</title>
    <link href="https://boctorio.github.io/2019/01/16/%E5%B9%BF%E8%A5%BF%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%B8%80%E5%B1%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B-D%E9%A2%98/"/>
    <id>https://boctorio.github.io/2019/01/16/广西大学第一届程序设计大赛-D题/</id>
    <published>2019-01-16T09:01:38.000Z</published>
    <updated>2019-02-02T14:22:09.694Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目描述</strong></p><blockquote><p>  小西买了一堆肥宅快乐水和肥宅快乐茶，准备和室友比谁更肥宅。 </p><p>  快乐水有A瓶，快乐茶B瓶。 </p><p>  小西和室友的规则是这样的： </p><ol><li><p>小西先手，轮流到每个人的回合，每个回合只能喝剩余数量较多的饮料 </p></li><li><p>满足规则1的同时，每次只能喝另一种饮料剩余数量的正整数倍 </p></li><li><p>满足1、2的同时，不能超额喝饮料，也就是说剩下2瓶的时候不能喝大于2瓶的数量。 </p></li><li><p>每个人在自己的回合如果能喝完剩下的其中一种饮料，那么就获得胜利。 </p><p>例如A=10，B=2。 </p><p>小西只能喝快乐水，且只能喝2/4/6/8/10瓶快乐水。小西可以喝10瓶快乐水直接获得胜利。 </p><p>小西和室友都是肥宅，所以他们都会才采取为了胜利最优的行动。 </p><p>现在请你判断小西是否能赢得胜利。 </p></li></ol></blockquote><a id="more"></a><p>输入描述:</p><blockquote><p>第一行输入一个整数T，表示有T组数据</p><p>接下来T行，每行为一组数据，每行有两个正整数表示A和B的初始数量</p><p>1 ≤ T ≤ 500 , 1 ≤ A,B ≤ 10^12 </p></blockquote><p>输出描述:</p><blockquote><p>对于每组数据，若小西可以获得胜利则输出一行“wula”，否则输出一行“mmp”，不需要输出引号</p></blockquote><p>你真的会GCD吗</p><p>这道题其实就和求GCD的过程有关。</p><p>求GCD的过程就是GCD( a , b ) = GCD( b , a % b )，其过程就是把 a 减去 b 的正整数倍，然后依次递归求解。</p><p>那么对于这个题，最后的状态一定是一个数量为 0 ，一个数量为正整数。而逆推就可以得到题目给出的 A , B 值。</p><ol><li>假设 A &lt; 2 * B,那么接下来的操作之后一定是（ A - B , B），接下来也一直持续这个过程，而且这个过程是可以一直递推求出来唯一解的。</li></ol><ol start="2"><li>假如 A &gt; 2 * B , 那么因为两人足够聪明，接下来的状态可以变为（ A , A%B）或者（ A , A % B + A ）。</li></ol><p>可以看到，第二个状态只能有一种操作：（ A , A % B + A ）- &gt;（ A , A%B）,因此这个时候可操作的人就能够随意挑选这两种状态之一来掌握自己的胜负。</p><ol start="3"><li>假设A % B=0 那就不多说了，直接就赢了。</li></ol><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;a,&amp;b);</span><br><span class="line">ll flag=<span class="number">1</span>;<span class="comment">//用flag来记录当前的赢家，因为此时我们并不知道谁有主动权 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//遇到可以判断赢家的条件时，循环就结束了 </span></span><br><span class="line"><span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line"><span class="keyword">if</span>(b%a==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a*<span class="number">2</span>&lt;b) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">flag*=<span class="number">-1</span>;</span><br><span class="line">b=b-a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wula\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmp\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;  小西买了一堆肥宅快乐水和肥宅快乐茶，准备和室友比谁更肥宅。 &lt;/p&gt;
&lt;p&gt;  快乐水有A瓶，快乐茶B瓶。 &lt;/p&gt;
&lt;p&gt;  小西和室友的规则是这样的： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;小西先手，轮流到每个人的回合，每个回合只能喝剩余数量较多的饮料 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;满足规则1的同时，每次只能喝另一种饮料剩余数量的正整数倍 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;满足1、2的同时，不能超额喝饮料，也就是说剩下2瓶的时候不能喝大于2瓶的数量。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个人在自己的回合如果能喝完剩下的其中一种饮料，那么就获得胜利。 &lt;/p&gt;
&lt;p&gt;例如A=10，B=2。 &lt;/p&gt;
&lt;p&gt;小西只能喝快乐水，且只能喝2/4/6/8/10瓶快乐水。小西可以喝10瓶快乐水直接获得胜利。 &lt;/p&gt;
&lt;p&gt;小西和室友都是肥宅，所以他们都会才采取为了胜利最优的行动。 &lt;/p&gt;
&lt;p&gt;现在请你判断小西是否能赢得胜利。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="博弈" scheme="https://boctorio.github.io/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>素数筛选法</title>
    <link href="https://boctorio.github.io/2019/01/09/%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/"/>
    <id>https://boctorio.github.io/2019/01/09/素数筛选法/</id>
    <published>2019-01-09T13:03:37.000Z</published>
    <updated>2019-01-09T13:38:10.356Z</updated>
    
    <content type="html"><![CDATA[<p>素数，是指因子只包含1和其本身的数，那么，我们怎么判断素数呢？</p><p><strong>（以下代码均基于打表（1~1e6）的基础上完成）</strong></p><a id="more"></a><h4 id="1-按照定义计算"><a href="#1-按照定义计算" class="headerlink" title="1.按照定义计算"></a>1.按照定义计算</h4><p>素数的定义就是一个数的因子只包含1和其本身，那么我们直接就按照定义写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn;i++)&#123;</span><br><span class="line">pri[i]=isprime(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最基础的写法，也是最小白的写法。毕竟，当时我刚高一加入大学的某个协会时，考的就有判断素数…</p><p>这种算法的复杂度为O(n^2),复杂度非常的大，对于1e6的数据范围来说肯定要超时，那么还有没有更优化的算法？答案是肯定的</p><h4 id="2-基于定义计算的优化算法"><a href="#2-基于定义计算的优化算法" class="headerlink" title="2.基于定义计算的优化算法"></a>2.基于定义计算的优化算法</h4><p>我们对一个合数进行考虑，例如12：</p><p>它的因子有1 2 3 4 6 12 ，而且1<em>12=12 ，  2</em>6=12 ， 3*4=12</p><p>可见，每一个因子都会有另一个对应的因子，观察可得，它们的分布是平均的，左边的一半对应右边的一半，那么最中间的分界线应该是什么？ √n 。</p><p>因此，我们只需要对√n 前面的数字进行判断即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pri[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)<span class="comment">//只需要将i变成i*i即可 </span></span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">pri[i]=isprime(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法的复杂度要比上一种好的多，复杂度为O(n√n),但是对于1e6的数据范围来说还是太大了。有没有再快一点的算法？</p><h4 id="3-素数筛选法"><a href="#3-素数筛选法" class="headerlink" title="3.素数筛选法"></a>3.素数筛选法</h4><p>素数筛选法的思想为：</p><p>从2开始，因为2的倍数一定不是素数，所以先把2的倍数全部删去；</p><p>接着找下一个素数3，把3的倍数全部删去；</p><p>因为4是2的倍数，已经被删去，所以直接找下一个素数5，把5的倍数全部删去；</p><p>接着7的倍数，11的倍数，……直到把1e6范围内的合数全部筛选出去，剩下的即为素数：</p><p>//以下优化均基于打表的基础上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> maxn 1000000+10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isprime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//此处vis[i]=1表示不是素数，vis[i]=0表示是素数 </span></span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//由于i*i的数据范围可能会超过int，所以需要用long long表示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i*i&lt;=maxn;i++)&#123;<span class="comment">//此处有优化，因为如果一个合数&gt;sqrt(maxn),那么他必定在前面已经被标记过。 </span></span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=i*i;j&lt;=maxn;j+=i)&#123;<span class="comment">//此处也有优化，我们只需要判断从i*i开始判断即可。 </span></span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">isprime();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法的复杂度应该为O(n);，是一种非常快速的判断素数的算法。</p><p>上述代码有两处优化，第一处优化的证明如下：</p><p><strong>假设 maxn &gt; i &gt; sqrt(maxn)并且为合数，那么，他肯定会有一个因子小于等于sqrt(maxn)，因此，i一定在之前已经被标记过了。</strong></p><p>第二处优化证明为：</p><p><strong>假设i&gt;2，那么对于 i * ( i - 1 )：</strong></p><p><strong>如果 i - 1是素数，那么 i * ( i - 1 ) 一定在之前已经被标记过；</strong></p><p><strong>否则，如果 i - 1 是合数，那么  i - 1能被分成更小的素数。设其中一个为a，那么 i <em> ( i - 1 )= i </em> ( i - 1 ) / a * a 也一定被标记过。</strong></p><p>优化后的算法时间会节省非常多，在平常的算法竞赛中，用上述代码就已经可以解决大部分的涉及素数打表的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;素数，是指因子只包含1和其本身的数，那么，我们怎么判断素数呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（以下代码均基于打表（1~1e6）的基础上完成）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="素数" scheme="https://boctorio.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>费马小定理--轻松判断大质数</title>
    <link href="https://boctorio.github.io/2019/01/09/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86-%E8%BD%BB%E6%9D%BE%E5%88%A4%E6%96%AD%E5%A4%A7%E8%B4%A8%E6%95%B0/"/>
    <id>https://boctorio.github.io/2019/01/09/费马小定理-轻松判断大质数/</id>
    <published>2019-01-09T01:51:56.000Z</published>
    <updated>2019-01-09T13:39:26.246Z</updated>
    
    <content type="html"><![CDATA[<h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>在算法竞赛中你会遇到各种各样的有关素数的问题，今天你来解决一个最基础的问题：如何判定一个素数。<br>对于给定的正整数p，若p非素数，输出-1<br>若p是素数 输出 ：{sigma(a^(p-1) % p) ，其中a的下界为1，上界为p-1}</p><a id="more"></a><p>即：</p><p> <img src="/2019/01/09/费马小定理-轻松判断大质数/判断素数.png" alt=""></p><p>输入</p><p>多实例测试，每组数据包含一个正整数p（p &lt; 10^16）。</p><p>输出</p><p>根据情况输出一个正整数，保证答案在int64之内，输出占一行。</p><p>样例输入</p><p>2</p><p>样例输出</p><p>1</p><p>这个题一般方法是就是暴力求解了，首先判断是不是素数，如果不是素数，那么输出-1，如果是素数，那么就实处上面那个式子的值。</p><p>但是题目要求的数据范围为1e16，如果我们用一般判断素数的方法（sqrt(n)）去求解的话，必定会超时，那么我们如何解决这个问题呢，费马小定理出现了。</p><blockquote><p>费马小定理<br> 假如p是质数，且gcd(a,p)=1，那么 a(p-1)≡1（mod p），例如：假如a是整数，p是质数，则a,p显然互质(即两者只有一个公约数1)，那么我们可以得到费马小定理的一个特例，即当p为质数时候， a^(p-1)≡1(mod p)。</p></blockquote><p>从费马小定理的定义我们可以知道，一般情况下，只要一个数字a，gcd(a,p)=1，那么p就是一个质数。</p><p>因此，我们可以随机几个数字（与p互质），如果a(p-1)≡1（mod p）对这些数字恒成立，那么p就是一个指数。</p><p>一般情况下，我们只需要列举十个左右的数字即可确定一个数字是否为质数。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,res,x;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">​    <span class="keyword">return</span> b?gcd(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">feima</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">​    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">​        <span class="keyword">return</span> (a*res)%n;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">​        a=(a*a)%n;</span><br><span class="line">​        x/=<span class="number">2</span>;</span><br><span class="line">​        <span class="keyword">return</span> feima(a);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">else</span>&#123;</span><br><span class="line">​        res=(res*a)%n;</span><br><span class="line">​        a=(a*a)%n;</span><br><span class="line">​        x/=<span class="number">2</span>;</span><br><span class="line">​        <span class="keyword">return</span> feima(a);</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> t,i;</span><br><span class="line">​    <span class="comment">//以下是我自己列举的一些随机数，我们也可以用一些随机数函数来找一些随机数 </span></span><br><span class="line">​    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">20</span>]=&#123;<span class="number">7</span>,<span class="number">43</span>,<span class="number">64</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">31</span>,<span class="number">45</span>,<span class="number">72</span>,<span class="number">81</span>,<span class="number">79</span>,<span class="number">47</span>,<span class="number">33</span>,<span class="number">43</span>,<span class="number">97</span>,<span class="number">121</span>,<span class="number">199</span>,<span class="number">173</span>,<span class="number">153</span>,<span class="number">157</span>,<span class="number">53</span>&#125;; </span><br><span class="line">​    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))&#123;</span><br><span class="line">​        <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">​            <span class="keyword">continue</span>;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">​            res=<span class="number">1</span>;</span><br><span class="line">​            x=n<span class="number">-1</span>;</span><br><span class="line">​            <span class="keyword">if</span>(gcd(a[i],n)!=<span class="number">1</span> || feima(a[i])!=<span class="number">1</span>)&#123;<span class="comment">//两个判断条件，两个数字互质且符合费马小定理 </span></span><br><span class="line">​                <span class="keyword">break</span>;</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span>(i==<span class="number">20</span>)&#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n<span class="number">-1</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">else</span></span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上方法即可迅速判断一个数是否是质数，对特别大的数字尤其适用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h5&gt;&lt;p&gt;在算法竞赛中你会遇到各种各样的有关素数的问题，今天你来解决一个最基础的问题：如何判定一个素数。&lt;br&gt;对于给定的正整数p，若p非素数，输出-1&lt;br&gt;若p是素数 输出 ：{sigma(a^(p-1) % p) ，其中a的下界为1，上界为p-1}&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="费马小定理" scheme="https://boctorio.github.io/tags/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    
      <category term="质数" scheme="https://boctorio.github.io/tags/%E8%B4%A8%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>算数基本定理 + 容斥定理</title>
    <link href="https://boctorio.github.io/2019/01/09/%E7%AE%97%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86-%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86/"/>
    <id>https://boctorio.github.io/2019/01/09/算数基本定理-容斥定理/</id>
    <published>2019-01-09T01:22:54.000Z</published>
    <updated>2019-01-09T13:39:38.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算数基本定理"><a href="#算数基本定理" class="headerlink" title="算数基本定理"></a>算数基本定理</h2><p>定义：任何一个大于1的自然数，如果N不为质数，那么N可以分解成有限个质数的乘积，并且在不计次序的情况下，这种分解方式是唯一的。</p><p>例如：60可以分解为 2^2 * 3 * 5</p><a id="more"></a><p>数学公式描述</p><p>N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn  （P1&lt;P2&lt;P3&lt;…<pn &="" pi="" 是质数="" ri="">=0）</pn></p><h4 id="质因子分解计算方法-算法复杂度-O-√n"><a href="#质因子分解计算方法-算法复杂度-O-√n" class="headerlink" title="质因子分解计算方法 算法复杂度  ( O(√n)  )"></a>质因子分解计算方法 算法复杂度  ( O(√n)  )</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; prime_factor(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ++ans[i];</span><br><span class="line">            n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)</span><br><span class="line">        ans[n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算数基本定理的应用"><a href="#算数基本定理的应用" class="headerlink" title="算数基本定理的应用"></a>算数基本定理的应用</h4><p>如何求N有几个因子？</p><p>根据算数基本定理：N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn</p><p>根据排列组合得到结果：</p><p>ans=(1+r1) * (1+r2) * (1+r3) * … * (1+rn)</p><p> <img src="/2019/01/09/算数基本定理-容斥定理/因子之和.png" alt=""></p><p>如何求N的所有因子之和？</p><p>根据算数基本定理：N=P1^r1 * P2^r2 * P3^r3 * … * Pn^rn</p><p>求GCD(X,Y)和LCM(X,Y)</p><p>根据算数基本定理：</p><p>X=P1^x1 * P2^x2 * P3^x3 * … * Pn^xn</p><p>Y=P1^y1 * P2^y2 * P3^y3 *… * Pn^yn</p><p>根据GCD和LCM的定义</p><p><img src="/2019/01/09/算数基本定理-容斥定理/GCD.png" alt=""></p><p><img src="/2019/01/09/算数基本定理-容斥定理/LCM.png" alt=""></p><h2 id="容斥定理"><a href="#容斥定理" class="headerlink" title="容斥定理"></a>容斥定理</h2><p>要计算几个集合并集的大小，我们要先将所有单个集合的大 小计算出来，然后减去所有两个集合相交的部分，再加回所 有三个集合相交的部分，再减去所有四个集合相交的部分， 依此类推，一直计算到所有集合相交的部分。</p><p>用Venn图来表示</p><p><img src="/2019/01/09/算数基本定理-容斥定理/veen.png" alt=""></p><p>数学公式描述</p><p><img src="/2019/01/09/算数基本定理-容斥定理/数学公式.png" alt=""></p><p>如果要对n个物体进行选择，那么有多少种情况？</p><p>代码    复杂度为O(2^n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span> &lt;&lt; m);i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i&gt;&gt;j &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容斥定理的应用"><a href="#容斥定理的应用" class="headerlink" title="容斥定理的应用"></a>容斥定理的应用</h4><p>问题：魔镜给小明m个数字（a1、a2 …… am）和一个整数n，魔镜定义：如果有一个数，是这m个数字里面任意一 个数的倍数，那么这个数称为LuckyNumber。而小明会的题 数为[1,n]闭区间内LuckyNumber的数量。 (0 &lt; m &lt; 15) 那么请你帮小明计算一下他会的题目数。</p><p>代码  复杂度为O(2^n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;(i&lt;&lt;m);i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    LL LCM=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>&amp;(i&gt;&gt;j))&#123;<span class="comment">//按位运算判断第m个数是否使用 </span></span><br><span class="line">            cnt++;</span><br><span class="line">            LCM=lcm(LCM,a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) ans+=n/LCM;<span class="comment">//判断n中元素使用的个数，奇加偶减</span></span><br><span class="line">    <span class="keyword">else</span> ans-=n/LCM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算数基本定理&quot;&gt;&lt;a href=&quot;#算数基本定理&quot; class=&quot;headerlink&quot; title=&quot;算数基本定理&quot;&gt;&lt;/a&gt;算数基本定理&lt;/h2&gt;&lt;p&gt;定义：任何一个大于1的自然数，如果N不为质数，那么N可以分解成有限个质数的乘积，并且在不计次序的情况下，这种分解方式是唯一的。&lt;/p&gt;
&lt;p&gt;例如：60可以分解为 2^2 * 3 * 5&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算数基本定理" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/"/>
    
      <category term="容斥定理" scheme="https://boctorio.github.io/tags/%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>BFS与DFS</title>
    <link href="https://boctorio.github.io/2019/01/08/BFS%E4%B8%8EDFS/"/>
    <id>https://boctorio.github.io/2019/01/08/BFS与DFS/</id>
    <published>2019-01-08T14:02:47.000Z</published>
    <updated>2019-01-09T13:39:49.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BFS-宽度优先搜索"><a href="#BFS-宽度优先搜索" class="headerlink" title="BFS(宽度优先搜索)"></a>BFS(宽度优先搜索)</h3><p>宽度优先搜索算法（又称广度优先搜索算法）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。</p><p>他并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><a id="more"></a><p>举例：</p><p>由橙色位置出发，进行BFS：</p><p>​                           <img src="/2019/01/08/BFS与DFS/1.png" alt=""></p><p>灰色位置表示已经走过，橙色标示当前位置</p><p>首先进行第一步：</p><p>​                          <img src="/2019/01/08/BFS与DFS/2.png" alt=""></p><p>已经走过的位置，不需要再走了</p><p>进行第二步：</p><p>​                     <img src="/2019/01/08/BFS与DFS/3.png" alt=""></p><p>同上，状态继承，进行第三步：</p><p>​                                  <img src="/2019/01/08/BFS与DFS/4.png" alt=""></p><p>进行第四步，到达终点，当前步数表示最小步数：</p><p>​                             <img src="/2019/01/08/BFS与DFS/5.png" alt=""></p><p>对于一个迷宫而言，我们要进行的步骤是一样的。</p><p>​                                             <img src="/2019/01/08/BFS与DFS/m1.png" alt=""></p><p>蓝色是起点，红色是终点，黑色为障碍物。</p><p>第一步，我们可以走以下几步：</p><p>​                                             <img src="/2019/01/08/BFS与DFS/m2.png" alt=""></p><p>接下来依次为：</p><p><img src="/2019/01/08/BFS与DFS/m3.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m4.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m5.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m6.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m7.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m8.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m9.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m10.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/m11.png" alt=""></p><p>当我们走到第十步时，走到了终点，因此，从起点到终点最少的步数即为10步。</p><p>接下来看一道基础的例题（HDU1242）Rescue：</p><blockquote><p>Problem Description</p><p>Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M &lt;= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.</p><p>Angel’s friends want to save Angel. Their task is: approach Angel. We assume that “approach Angel” is to get to the position where Angel stays. When there’s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.</p><p>You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)</p><p>Input</p><p>First line contains two integers stand for N and M.</p><p>Then N lines follows, every line has M characters. “.” stands for road, “a” stands for Angel, and “r” stands for each of Angel’s friend. </p><p>Process to the end of the file.</p><p>Output</p><p>For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing “Poor ANGEL has to stay in the prison all his life.” </p></blockquote><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">8</span></span><br><span class="line">#.#####.</span><br><span class="line">#.a#..r.</span><br><span class="line">#..<span class="meta">#x...</span></span><br><span class="line">..#..#.#</span><br><span class="line">#...##..</span><br><span class="line">.#......</span><br><span class="line">........</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p>这个题大概的意思就是求从字符a出发，到达字符r的最少时间，其中 . 代表空地，#代表墙，x代表守卫，每杀死一个守卫我们就需要消耗一秒的时间。</p><p>这个题可以用BFS直接求解，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXN 510</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN][MAXN];<span class="comment">//用来储存地图 </span></span><br><span class="line"><span class="keyword">int</span> vis[MAXN][MAXN];<span class="comment">//用来标记已经走过的地点 </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(name i,name j)&#123;<span class="comment">//对走过的地点顺序进行排序 </span></span><br><span class="line"><span class="keyword">return</span> i.step&gt;j.step;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//表示行走的四个方向，顺序为右，左，上，下 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy,<span class="keyword">int</span> ex,<span class="keyword">int</span> ey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">priority_queue&lt;name&gt;que;<span class="comment">//使用队列用来储存上一步走过的地点 </span></span><br><span class="line">name e1,e2;</span><br><span class="line">e1.x=sx,e1.y=sy,e1.step=<span class="number">0</span>;</span><br><span class="line">que.push(e1);<span class="comment">//输入起点 </span></span><br><span class="line">vis[sx][sy]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>; </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())&#123;<span class="comment">//当队列为空时，即表示我们已经把所有的能走的地点都走了一遍 </span></span><br><span class="line">e1=que.top();<span class="comment">//将队列第一个地点的信息赋给e1； 此时e1即表示上一步走过的地点的信息 </span></span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span>(e1.x==ex &amp;&amp; e1.y==ey)&#123;<span class="comment">//对这个地点进行判断，看是否是是终点 </span></span><br><span class="line">ans=e1.step;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//如果e1不是终点，那么对e1的上下左右进行判断，如果可以走，那么就将信息储存在队列中 </span></span><br><span class="line">e2.x=e1.x+d[i][<span class="number">0</span>];</span><br><span class="line">e2.y=e1.y+d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(e2.x&lt;<span class="number">0</span> || e2.x&gt;=n || e2.y&lt;<span class="number">0</span> || e2.y&gt;=m) <span class="keyword">continue</span>;<span class="comment">//对边界进行判断，如果超出边界，则不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(vis[e2.x][e2.y]==<span class="number">1</span>) <span class="keyword">continue</span>;<span class="comment">//如果当前位置已经走过，那么就不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(str[e2.x][e2.y]==<span class="string">'#'</span>) <span class="keyword">continue</span>;<span class="comment">//如果是墙壁,不进行保存 </span></span><br><span class="line"><span class="keyword">if</span>(str[e2.x][e2.y]==<span class="string">'x'</span>) e2.step=e1.step+<span class="number">2</span>;<span class="comment">//如果是守卫的话，需要消耗两个单位时间 </span></span><br><span class="line"><span class="keyword">else</span> e2.step=e1.step+<span class="number">1</span>;<span class="comment">//如果是空地,一个单位时间 </span></span><br><span class="line">que.push(e2);<span class="comment">//将地点存入队列 </span></span><br><span class="line">vis[e2.x][e2.y]=<span class="number">1</span>;<span class="comment">//降低点进行标记 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Poor ANGEL has to stay in the prison all his life.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sx,sy,ex,ey;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//找寻起点和终点 </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i][j]==<span class="string">'a'</span>) sx=i,sy=j;</span><br><span class="line"><span class="keyword">if</span>(str[i][j]==<span class="string">'r'</span>) ex=i,ey=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS(sx,sy,ex,ey);<span class="comment">//开始BFS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，我们使用BFS的步骤为：</p><p><strong>1.对地图信息进行保存</strong></p><p><strong>2.找到起点和终点信息</strong></p><p><strong>3.从起点开始，对所走过的每一步进行判断</strong></p><p><strong>4.如果走的这一步可行，那么储存这一步的信息，并标记这个位置，表示不会再走到这个位置</strong></p><p><strong>5.如果不可行，那么就不进行操作</strong></p><p><strong>6.找到终点</strong></p><p>以上，即为BFS的功能。</p><h3 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h3><p>DFS的目的是要达到被搜索结构的叶结点。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><p>DFS的使用基础为递归，当我们顺着一个节点向下走时，如果走不下去了，就回溯，如果上一个节点还有其他的节点，那么我们就会对这个节点再进行搜索。</p><p>对于下面这个图</p><p><img src="/2019/01/08/BFS与DFS/d1.png" alt=""></p><p>首先我们将从第一个节点开始出发，然后搜索第二个节点，</p><p><img src="/2019/01/08/BFS与DFS/d2.png" alt=""></p><p>因为第二个节点下面还有第四个节点，因此我们继续向下搜索，</p><p><img src="/2019/01/08/BFS与DFS/d3.png" alt=""></p><p>第四个节点下面已经没有其他节点，因此我们回溯到第二个节点</p><p>第二个节点下面还有第五个节点，因此我们搜索第五个节点</p><p><img src="/2019/01/08/BFS与DFS/d4.png" alt=""></p><p>然后继续回溯，到第一个节点，</p><p>接下来就搜索第三个节点，第五个节点</p><p><img src="/2019/01/08/BFS与DFS/d5.png" alt=""></p><p><img src="/2019/01/08/BFS与DFS/d6.png" alt=""></p><p>当再次回溯到第一个节点时，已经没有其他的节点可进行搜索，因此搜索的过程到此结束，DFS也到此结束。</p><p>上面就是DFS的功能，DFS是对所有可能的结果进行一次彻底的搜索，这样会保证不会有任何情况会被遗漏。</p><p>接下来看一道例题（HDU1312）Red and Black：</p><blockquote><p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles. </p><p>Write a program to count the number of black tiles which he can reach by repeating the moves described above. </p><p>Input</p><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20. </p><p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows. </p><p>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set) </p><p>Output</p><p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). </p></blockquote><p>Sample Input</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">9</span></span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line"><span class="number">11</span> <span class="number">9</span></span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p>这个题的大概意思就是给你一个起点，你能够走到多少个地点。</p><p>其中 ‘ . ‘是空地，#是墙壁，@是起点。</p><p>接下来看一下代码，思想和BFS类似：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a) memset(a,0,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"><span class="keyword">char</span> mapp[N][N];<span class="comment">//储存地图 </span></span><br><span class="line"><span class="keyword">int</span> vis[N][N];<span class="comment">//标记位置 </span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//四个行走方向 </span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//检测不能走通的条件 </span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=n||y&lt;<span class="number">0</span>||y&gt;=m||mapp[x][y]==<span class="string">'#'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!check(x,y)||vis[x][y])&#123;<span class="comment">//如果不能走通，那么直接返回 </span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        sum++; </span><br><span class="line">        <span class="keyword">int</span> fx,fy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//在此节点的基础上，再对周围四个节点进行判断 </span></span><br><span class="line">            vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">            fx = x + dx[i];</span><br><span class="line">            fy = y + dy[i];</span><br><span class="line">            DFS(fx,fy);<span class="comment">//此处使用递归求解 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF&amp;&amp;(n||m))&#123;</span><br><span class="line">        clr(mapp);clr(vis);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mapp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mapp[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">                    DFS(i,j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们可以看出，DFS的使用方法为：</p><p><strong>1.找出起点</strong></p><p><strong>2.对起点四个方向的状态进行判断，如果是空地，就进行递归，继续对这四个方向的位置的四周进行判断，如果不是空地，就结束递归</strong></p><p><strong>3.输出结果</strong></p><p>DFS与BFS有很多相似的地方，不过BFS求的是最短路，DFS求的是方案数，我们可以根据题目要求选择这两种方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;BFS-宽度优先搜索&quot;&gt;&lt;a href=&quot;#BFS-宽度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;BFS(宽度优先搜索)&quot;&gt;&lt;/a&gt;BFS(宽度优先搜索)&lt;/h3&gt;&lt;p&gt;宽度优先搜索算法（又称广度优先搜索算法）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。&lt;/p&gt;
&lt;p&gt;他并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://boctorio.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://boctorio.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://boctorio.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="https://boctorio.github.io/2019/01/08/%E5%89%8D%E8%A8%80/"/>
    <id>https://boctorio.github.io/2019/01/08/前言/</id>
    <published>2019-01-08T05:49:42.000Z</published>
    <updated>2019-01-08T05:57:45.359Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经是2019年。我加入HPU-ACM（现为算法协会）是在18年3月份左右，虽然时间不长，但是已经成为这个大家庭的一份子了。经过了近一年的学习与比赛，我觉得收获了很多，但是回头一想，却又想不起来我到底学过了多少的东西。看着协会里的成员一个个的在努力，在进步，我也希望能够继续深入学习，在ACM的路上走的更远。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在已经是2019年。我加入HPU-ACM（现为算法协会）是在18年3月份左右，虽然时间不长，但是已经成为这个大家庭的一份子了。经过了近一年的学习与比赛，我觉得收获了很多，但是回头一想，却又想不起来我到底学过了多少的东西。看着协会里的成员一个个的在努力，在进步，我也希望能够
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My First Blog</title>
    <link href="https://boctorio.github.io/2019/01/07/First%20blog/"/>
    <id>https://boctorio.github.io/2019/01/07/First blog/</id>
    <published>2019-01-07T14:19:17.000Z</published>
    <updated>2019-01-08T13:16:26.736Z</updated>
    
    <content type="html"><![CDATA[<p>纪念我的第一篇博客 ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;纪念我的第一篇博客 ^_^&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
